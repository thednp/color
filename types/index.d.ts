import RGBA from "./interface/rgba";
import HSLA from "./interface/hsla";
import HSVA from "./interface/hsva";
import HWBA from "./interface/hwba";
import ColorFormats from "./util/colorFormats";
import ColorInputTypes from "./util/colorInputTypes";
export default class Color {
    r: number;
    g: number;
    b: number;
    a: number;
    format: string;
    ok: boolean;
    originalInput: string | Color | ColorInputTypes;
    constructor(input?: ColorInputTypes | Partial<Color>, config?: ColorFormats);
    get isValid(): boolean;
    get isDark(): boolean;
    get luminance(): number;
    get brightness(): number;
    get name(): string;
    toRgb(): RGBA;
    toRgbString(): string;
    toRgbCSS4String(): string;
    toHex(allow3Char?: boolean | undefined): string;
    toHexString(allow3Char?: boolean | undefined): string;
    toHex8(allow4Char?: boolean | undefined): string;
    toHex8String(allow4Char?: boolean | undefined): string;
    toHsv(): HSVA;
    toHsl(): HSLA;
    toHslString(): string;
    toHslCSS4String(): string;
    toHwb(): HWBA;
    toHwbString(): string;
    setAlpha(alpha?: number): Color;
    saturate(amount?: number): Color;
    desaturate(amount?: number): Color;
    greyscale(): Color;
    lighten(amount?: number): Color;
    darken(amount?: number): Color;
    spin(amount?: number): Color;
    clone(): Color;
    toString(allowShort?: boolean | undefined): string;
}
//# sourceMappingURL=index.d.ts.map