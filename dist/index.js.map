{
  "version": 3,
  "sources": ["../src/util/nonColors.ts", "../src/util/roundPart.ts", "../src/util/webColors.ts", "../src/util/matchers.ts", "../src/util/isNonColor.ts", "../src/util/isColorType.ts", "../src/util/isOnePointZero.ts", "../src/util/isPercentage.ts", "../src/util/isValidCSSUnit.ts", "../src/util/colorFormat.ts", "../src/util/isColorName.ts", "../src/util/bound01.ts", "../src/util/boundAlpha.ts", "../src/util/clamp01.ts", "../src/util/pad2.ts", "../src/util/getRGBFromName.ts", "../src/convert/parseIntFromHex.ts", "../src/convert/convertHexToDecimal.ts", "../src/convert/convertDecimalToHex.ts", "../src/convert/rgbToHsl.ts", "../src/convert/hueToRgb.ts", "../src/convert/hslToRgb.ts", "../src/convert/rgbToHwb.ts", "../src/convert/hwbToRgb.ts", "../src/convert/rgbToHsv.ts", "../src/convert/hsvToRgb.ts", "../src/convert/rgbToHex.ts", "../src/convert/rgbaToHex.ts", "../src/util/stringInputToObject.ts", "../src/util/inputToRgb.ts", "../src/index.ts"],
  "sourcesContent": ["/**\r\n * A list of explicit default non-color values.\r\n */\r\nconst nonColors = [\r\n  \"transparent\",\r\n  \"currentColor\",\r\n  \"inherit\",\r\n  \"revert\",\r\n  \"initial\",\r\n];\r\nexport default nonColors;\r\n", "/**\r\n * Round colour components, for all formats except HEX.\r\n */\r\nexport default function roundPart(v: number): number {\r\n  const floor = Math.floor(v);\r\n  return v - floor < 0.5 ? floor : Math.round(v);\r\n}\r\n", "import RGB from \"../interface/rgb\";\r\n\r\n/**\r\n * 148 Web Colors\r\n * <https://en.wikipedia.org/wiki/Web_colors>\r\n */\r\nconst webColors: [string, RGB][] = [\r\n  [\r\n    \"aliceblue\",\r\n    {\r\n      r: 240,\r\n      g: 248,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"antiquewhite\",\r\n    {\r\n      r: 250,\r\n      g: 235,\r\n      b: 215,\r\n    },\r\n  ],\r\n  [\r\n    \"aqua\",\r\n    {\r\n      r: 0,\r\n      g: 255,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"aquamarine\",\r\n    {\r\n      r: 127,\r\n      g: 255,\r\n      b: 212,\r\n    },\r\n  ],\r\n  [\r\n    \"azure\",\r\n    {\r\n      r: 240,\r\n      g: 255,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"beige\",\r\n    {\r\n      r: 245,\r\n      g: 245,\r\n      b: 220,\r\n    },\r\n  ],\r\n  [\r\n    \"bisque\",\r\n    {\r\n      r: 255,\r\n      g: 228,\r\n      b: 196,\r\n    },\r\n  ],\r\n  [\r\n    \"black\",\r\n    {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"blanchedalmond\",\r\n    {\r\n      r: 255,\r\n      g: 235,\r\n      b: 205,\r\n    },\r\n  ],\r\n  [\r\n    \"blue\",\r\n    {\r\n      r: 0,\r\n      g: 0,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"blueviolet\",\r\n    {\r\n      r: 138,\r\n      g: 43,\r\n      b: 226,\r\n    },\r\n  ],\r\n  [\r\n    \"brown\",\r\n    {\r\n      r: 165,\r\n      g: 42,\r\n      b: 42,\r\n    },\r\n  ],\r\n  [\r\n    \"burlywood\",\r\n    {\r\n      r: 222,\r\n      g: 184,\r\n      b: 135,\r\n    },\r\n  ],\r\n  [\r\n    \"cadetblue\",\r\n    {\r\n      r: 95,\r\n      g: 158,\r\n      b: 160,\r\n    },\r\n  ],\r\n  [\r\n    \"chartreuse\",\r\n    {\r\n      r: 127,\r\n      g: 255,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"chocolate\",\r\n    {\r\n      r: 210,\r\n      g: 105,\r\n      b: 30,\r\n    },\r\n  ],\r\n  [\r\n    \"coral\",\r\n    {\r\n      r: 255,\r\n      g: 127,\r\n      b: 80,\r\n    },\r\n  ],\r\n  [\r\n    \"cornflowerblue\",\r\n    {\r\n      r: 100,\r\n      g: 149,\r\n      b: 237,\r\n    },\r\n  ],\r\n  [\r\n    \"cornsilk\",\r\n    {\r\n      r: 255,\r\n      g: 248,\r\n      b: 220,\r\n    },\r\n  ],\r\n  [\r\n    \"crimson\",\r\n    {\r\n      r: 220,\r\n      g: 20,\r\n      b: 60,\r\n    },\r\n  ],\r\n  [\r\n    \"cyan\",\r\n    {\r\n      r: 0,\r\n      g: 255,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"darkblue\",\r\n    {\r\n      r: 0,\r\n      g: 0,\r\n      b: 139,\r\n    },\r\n  ],\r\n  [\r\n    \"darkcyan\",\r\n    {\r\n      r: 0,\r\n      g: 139,\r\n      b: 139,\r\n    },\r\n  ],\r\n  [\r\n    \"darkgoldenrod\",\r\n    {\r\n      r: 184,\r\n      g: 134,\r\n      b: 11,\r\n    },\r\n  ],\r\n  [\r\n    \"darkgray\",\r\n    {\r\n      r: 169,\r\n      g: 169,\r\n      b: 169,\r\n    },\r\n  ],\r\n  [\r\n    \"darkgreen\",\r\n    {\r\n      r: 0,\r\n      g: 100,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"darkgrey\",\r\n    {\r\n      r: 169,\r\n      g: 169,\r\n      b: 169,\r\n    },\r\n  ],\r\n  [\r\n    \"darkkhaki\",\r\n    {\r\n      r: 189,\r\n      g: 183,\r\n      b: 107,\r\n    },\r\n  ],\r\n  [\r\n    \"darkmagenta\",\r\n    {\r\n      r: 139,\r\n      g: 0,\r\n      b: 139,\r\n    },\r\n  ],\r\n  [\r\n    \"darkolivegreen\",\r\n    {\r\n      r: 85,\r\n      g: 107,\r\n      b: 47,\r\n    },\r\n  ],\r\n  [\r\n    \"darkorange\",\r\n    {\r\n      r: 255,\r\n      g: 140,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"darkorchid\",\r\n    {\r\n      r: 153,\r\n      g: 50,\r\n      b: 204,\r\n    },\r\n  ],\r\n  [\r\n    \"darkred\",\r\n    {\r\n      r: 139,\r\n      g: 0,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"darksalmon\",\r\n    {\r\n      r: 233,\r\n      g: 150,\r\n      b: 122,\r\n    },\r\n  ],\r\n  [\r\n    \"darkseagreen\",\r\n    {\r\n      r: 143,\r\n      g: 188,\r\n      b: 143,\r\n    },\r\n  ],\r\n  [\r\n    \"darkslateblue\",\r\n    {\r\n      r: 72,\r\n      g: 61,\r\n      b: 139,\r\n    },\r\n  ],\r\n  [\r\n    \"darkslategray\",\r\n    {\r\n      r: 47,\r\n      g: 79,\r\n      b: 79,\r\n    },\r\n  ],\r\n  [\r\n    \"darkslategrey\",\r\n    {\r\n      r: 47,\r\n      g: 79,\r\n      b: 79,\r\n    },\r\n  ],\r\n  [\r\n    \"darkturquoise\",\r\n    {\r\n      r: 0,\r\n      g: 206,\r\n      b: 209,\r\n    },\r\n  ],\r\n  [\r\n    \"darkviolet\",\r\n    {\r\n      r: 148,\r\n      g: 0,\r\n      b: 211,\r\n    },\r\n  ],\r\n  [\r\n    \"deeppink\",\r\n    {\r\n      r: 255,\r\n      g: 20,\r\n      b: 147,\r\n    },\r\n  ],\r\n  [\r\n    \"deepskyblue\",\r\n    {\r\n      r: 0,\r\n      g: 191,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"dimgray\",\r\n    {\r\n      r: 105,\r\n      g: 105,\r\n      b: 105,\r\n    },\r\n  ],\r\n  [\r\n    \"dimgrey\",\r\n    {\r\n      r: 105,\r\n      g: 105,\r\n      b: 105,\r\n    },\r\n  ],\r\n  [\r\n    \"dodgerblue\",\r\n    {\r\n      r: 30,\r\n      g: 144,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"firebrick\",\r\n    {\r\n      r: 178,\r\n      g: 34,\r\n      b: 34,\r\n    },\r\n  ],\r\n  [\r\n    \"floralwhite\",\r\n    {\r\n      r: 255,\r\n      g: 250,\r\n      b: 240,\r\n    },\r\n  ],\r\n  [\r\n    \"forestgreen\",\r\n    {\r\n      r: 34,\r\n      g: 139,\r\n      b: 34,\r\n    },\r\n  ],\r\n  [\r\n    \"fuchsia\",\r\n    {\r\n      r: 255,\r\n      g: 0,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"gainsboro\",\r\n    {\r\n      r: 220,\r\n      g: 220,\r\n      b: 220,\r\n    },\r\n  ],\r\n  [\r\n    \"ghostwhite\",\r\n    {\r\n      r: 248,\r\n      g: 248,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"goldenrod\",\r\n    {\r\n      r: 218,\r\n      g: 165,\r\n      b: 32,\r\n    },\r\n  ],\r\n  [\r\n    \"gold\",\r\n    {\r\n      r: 255,\r\n      g: 215,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"gray\",\r\n    {\r\n      r: 128,\r\n      g: 128,\r\n      b: 128,\r\n    },\r\n  ],\r\n  [\r\n    \"green\",\r\n    {\r\n      r: 0,\r\n      g: 128,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"greenyellow\",\r\n    {\r\n      r: 173,\r\n      g: 255,\r\n      b: 47,\r\n    },\r\n  ],\r\n  [\r\n    \"grey\",\r\n    {\r\n      r: 128,\r\n      g: 128,\r\n      b: 128,\r\n    },\r\n  ],\r\n  [\r\n    \"honeydew\",\r\n    {\r\n      r: 240,\r\n      g: 255,\r\n      b: 240,\r\n    },\r\n  ],\r\n  [\r\n    \"hotpink\",\r\n    {\r\n      r: 255,\r\n      g: 105,\r\n      b: 180,\r\n    },\r\n  ],\r\n  [\r\n    \"indianred\",\r\n    {\r\n      r: 205,\r\n      g: 92,\r\n      b: 92,\r\n    },\r\n  ],\r\n  [\r\n    \"indigo\",\r\n    {\r\n      r: 75,\r\n      g: 0,\r\n      b: 130,\r\n    },\r\n  ],\r\n  [\r\n    \"ivory\",\r\n    {\r\n      r: 255,\r\n      g: 255,\r\n      b: 240,\r\n    },\r\n  ],\r\n  [\r\n    \"khaki\",\r\n    {\r\n      r: 240,\r\n      g: 230,\r\n      b: 140,\r\n    },\r\n  ],\r\n  [\r\n    \"lavenderblush\",\r\n    {\r\n      r: 255,\r\n      g: 240,\r\n      b: 245,\r\n    },\r\n  ],\r\n  [\r\n    \"lavender\",\r\n    {\r\n      r: 230,\r\n      g: 230,\r\n      b: 250,\r\n    },\r\n  ],\r\n  [\r\n    \"lawngreen\",\r\n    {\r\n      r: 124,\r\n      g: 252,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"lemonchiffon\",\r\n    {\r\n      r: 255,\r\n      g: 250,\r\n      b: 205,\r\n    },\r\n  ],\r\n  [\r\n    \"lightblue\",\r\n    {\r\n      r: 173,\r\n      g: 216,\r\n      b: 230,\r\n    },\r\n  ],\r\n  [\r\n    \"lightcoral\",\r\n    {\r\n      r: 240,\r\n      g: 128,\r\n      b: 128,\r\n    },\r\n  ],\r\n  [\r\n    \"lightcyan\",\r\n    {\r\n      r: 224,\r\n      g: 255,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"lightgoldenrodyellow\",\r\n    {\r\n      r: 250,\r\n      g: 250,\r\n      b: 210,\r\n    },\r\n  ],\r\n  [\r\n    \"lightgray\",\r\n    {\r\n      r: 211,\r\n      g: 211,\r\n      b: 211,\r\n    },\r\n  ],\r\n  [\r\n    \"lightgreen\",\r\n    {\r\n      r: 144,\r\n      g: 238,\r\n      b: 144,\r\n    },\r\n  ],\r\n  [\r\n    \"lightgrey\",\r\n    {\r\n      r: 211,\r\n      g: 211,\r\n      b: 211,\r\n    },\r\n  ],\r\n  [\r\n    \"lightpink\",\r\n    {\r\n      r: 255,\r\n      g: 182,\r\n      b: 193,\r\n    },\r\n  ],\r\n  [\r\n    \"lightsalmon\",\r\n    {\r\n      r: 255,\r\n      g: 160,\r\n      b: 122,\r\n    },\r\n  ],\r\n  [\r\n    \"lightseagreen\",\r\n    {\r\n      r: 32,\r\n      g: 178,\r\n      b: 170,\r\n    },\r\n  ],\r\n  [\r\n    \"lightskyblue\",\r\n    {\r\n      r: 135,\r\n      g: 206,\r\n      b: 250,\r\n    },\r\n  ],\r\n  [\r\n    \"lightslategray\",\r\n    {\r\n      r: 119,\r\n      g: 136,\r\n      b: 153,\r\n    },\r\n  ],\r\n  [\r\n    \"lightslategrey\",\r\n    {\r\n      r: 119,\r\n      g: 136,\r\n      b: 153,\r\n    },\r\n  ],\r\n  [\r\n    \"lightsteelblue\",\r\n    {\r\n      r: 176,\r\n      g: 196,\r\n      b: 222,\r\n    },\r\n  ],\r\n  [\r\n    \"lightyellow\",\r\n    {\r\n      r: 255,\r\n      g: 255,\r\n      b: 224,\r\n    },\r\n  ],\r\n  [\r\n    \"lime\",\r\n    {\r\n      r: 0,\r\n      g: 255,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"limegreen\",\r\n    {\r\n      r: 50,\r\n      g: 205,\r\n      b: 50,\r\n    },\r\n  ],\r\n  [\r\n    \"linen\",\r\n    {\r\n      r: 250,\r\n      g: 240,\r\n      b: 230,\r\n    },\r\n  ],\r\n  [\r\n    \"magenta\",\r\n    {\r\n      r: 255,\r\n      g: 0,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"maroon\",\r\n    {\r\n      r: 128,\r\n      g: 0,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumaquamarine\",\r\n    {\r\n      r: 102,\r\n      g: 205,\r\n      b: 170,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumblue\",\r\n    {\r\n      r: 0,\r\n      g: 0,\r\n      b: 205,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumorchid\",\r\n    {\r\n      r: 186,\r\n      g: 85,\r\n      b: 211,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumpurple\",\r\n    {\r\n      r: 147,\r\n      g: 112,\r\n      b: 219,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumseagreen\",\r\n    {\r\n      r: 60,\r\n      g: 179,\r\n      b: 113,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumslateblue\",\r\n    {\r\n      r: 123,\r\n      g: 104,\r\n      b: 238,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumspringgreen\",\r\n    {\r\n      r: 0,\r\n      g: 250,\r\n      b: 154,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumturquoise\",\r\n    {\r\n      r: 72,\r\n      g: 209,\r\n      b: 204,\r\n    },\r\n  ],\r\n  [\r\n    \"mediumvioletred\",\r\n    {\r\n      r: 199,\r\n      g: 21,\r\n      b: 133,\r\n    },\r\n  ],\r\n  [\r\n    \"midnightblue\",\r\n    {\r\n      r: 25,\r\n      g: 25,\r\n      b: 112,\r\n    },\r\n  ],\r\n  [\r\n    \"mintcream\",\r\n    {\r\n      r: 245,\r\n      g: 255,\r\n      b: 250,\r\n    },\r\n  ],\r\n  [\r\n    \"mistyrose\",\r\n    {\r\n      r: 255,\r\n      g: 228,\r\n      b: 225,\r\n    },\r\n  ],\r\n  [\r\n    \"moccasin\",\r\n    {\r\n      r: 255,\r\n      g: 228,\r\n      b: 181,\r\n    },\r\n  ],\r\n  [\r\n    \"navajowhite\",\r\n    {\r\n      r: 255,\r\n      g: 222,\r\n      b: 173,\r\n    },\r\n  ],\r\n  [\r\n    \"navy\",\r\n    {\r\n      r: 0,\r\n      g: 0,\r\n      b: 128,\r\n    },\r\n  ],\r\n  [\r\n    \"oldlace\",\r\n    {\r\n      r: 253,\r\n      g: 245,\r\n      b: 230,\r\n    },\r\n  ],\r\n  [\r\n    \"olive\",\r\n    {\r\n      r: 128,\r\n      g: 128,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"olivedrab\",\r\n    {\r\n      r: 107,\r\n      g: 142,\r\n      b: 35,\r\n    },\r\n  ],\r\n  [\r\n    \"orange\",\r\n    {\r\n      r: 255,\r\n      g: 165,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"orangered\",\r\n    {\r\n      r: 255,\r\n      g: 69,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"orchid\",\r\n    {\r\n      r: 218,\r\n      g: 112,\r\n      b: 214,\r\n    },\r\n  ],\r\n  [\r\n    \"palegoldenrod\",\r\n    {\r\n      r: 238,\r\n      g: 232,\r\n      b: 170,\r\n    },\r\n  ],\r\n  [\r\n    \"palegreen\",\r\n    {\r\n      r: 152,\r\n      g: 251,\r\n      b: 152,\r\n    },\r\n  ],\r\n  [\r\n    \"paleturquoise\",\r\n    {\r\n      r: 175,\r\n      g: 238,\r\n      b: 238,\r\n    },\r\n  ],\r\n  [\r\n    \"palevioletred\",\r\n    {\r\n      r: 219,\r\n      g: 112,\r\n      b: 147,\r\n    },\r\n  ],\r\n  [\r\n    \"papayawhip\",\r\n    {\r\n      r: 255,\r\n      g: 239,\r\n      b: 213,\r\n    },\r\n  ],\r\n  [\r\n    \"peachpuff\",\r\n    {\r\n      r: 255,\r\n      g: 218,\r\n      b: 185,\r\n    },\r\n  ],\r\n  [\r\n    \"peru\",\r\n    {\r\n      r: 205,\r\n      g: 133,\r\n      b: 63,\r\n    },\r\n  ],\r\n  [\r\n    \"pink\",\r\n    {\r\n      r: 255,\r\n      g: 192,\r\n      b: 203,\r\n    },\r\n  ],\r\n  [\r\n    \"plum\",\r\n    {\r\n      r: 221,\r\n      g: 160,\r\n      b: 221,\r\n    },\r\n  ],\r\n  [\r\n    \"powderblue\",\r\n    {\r\n      r: 176,\r\n      g: 224,\r\n      b: 230,\r\n    },\r\n  ],\r\n  [\r\n    \"purple\",\r\n    {\r\n      r: 128,\r\n      g: 0,\r\n      b: 128,\r\n    },\r\n  ],\r\n  [\r\n    \"rebeccapurple\",\r\n    {\r\n      r: 102,\r\n      g: 51,\r\n      b: 153,\r\n    },\r\n  ],\r\n  [\r\n    \"red\",\r\n    {\r\n      r: 255,\r\n      g: 0,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"rosybrown\",\r\n    {\r\n      r: 188,\r\n      g: 143,\r\n      b: 143,\r\n    },\r\n  ],\r\n  [\r\n    \"royalblue\",\r\n    {\r\n      r: 65,\r\n      g: 105,\r\n      b: 225,\r\n    },\r\n  ],\r\n  [\r\n    \"saddlebrown\",\r\n    {\r\n      r: 139,\r\n      g: 69,\r\n      b: 19,\r\n    },\r\n  ],\r\n  [\r\n    \"salmon\",\r\n    {\r\n      r: 250,\r\n      g: 128,\r\n      b: 114,\r\n    },\r\n  ],\r\n  [\r\n    \"sandybrown\",\r\n    {\r\n      r: 244,\r\n      g: 164,\r\n      b: 96,\r\n    },\r\n  ],\r\n  [\r\n    \"seagreen\",\r\n    {\r\n      r: 46,\r\n      g: 139,\r\n      b: 87,\r\n    },\r\n  ],\r\n  [\r\n    \"seashell\",\r\n    {\r\n      r: 255,\r\n      g: 245,\r\n      b: 238,\r\n    },\r\n  ],\r\n  [\r\n    \"sienna\",\r\n    {\r\n      r: 160,\r\n      g: 82,\r\n      b: 45,\r\n    },\r\n  ],\r\n  [\r\n    \"silver\",\r\n    {\r\n      r: 192,\r\n      g: 192,\r\n      b: 192,\r\n    },\r\n  ],\r\n  [\r\n    \"skyblue\",\r\n    {\r\n      r: 135,\r\n      g: 206,\r\n      b: 235,\r\n    },\r\n  ],\r\n  [\r\n    \"slateblue\",\r\n    {\r\n      r: 106,\r\n      g: 90,\r\n      b: 205,\r\n    },\r\n  ],\r\n  [\r\n    \"slategray\",\r\n    {\r\n      r: 112,\r\n      g: 128,\r\n      b: 144,\r\n    },\r\n  ],\r\n  [\r\n    \"slategrey\",\r\n    {\r\n      r: 112,\r\n      g: 128,\r\n      b: 144,\r\n    },\r\n  ],\r\n  [\r\n    \"snow\",\r\n    {\r\n      r: 255,\r\n      g: 250,\r\n      b: 250,\r\n    },\r\n  ],\r\n  [\r\n    \"springgreen\",\r\n    {\r\n      r: 0,\r\n      g: 255,\r\n      b: 127,\r\n    },\r\n  ],\r\n  [\r\n    \"steelblue\",\r\n    {\r\n      r: 70,\r\n      g: 130,\r\n      b: 180,\r\n    },\r\n  ],\r\n  [\r\n    \"tan\",\r\n    {\r\n      r: 210,\r\n      g: 180,\r\n      b: 140,\r\n    },\r\n  ],\r\n  [\r\n    \"teal\",\r\n    {\r\n      r: 0,\r\n      g: 128,\r\n      b: 128,\r\n    },\r\n  ],\r\n  [\r\n    \"thistle\",\r\n    {\r\n      r: 216,\r\n      g: 191,\r\n      b: 216,\r\n    },\r\n  ],\r\n  [\r\n    \"tomato\",\r\n    {\r\n      r: 255,\r\n      g: 99,\r\n      b: 71,\r\n    },\r\n  ],\r\n  [\r\n    \"turquoise\",\r\n    {\r\n      r: 64,\r\n      g: 224,\r\n      b: 208,\r\n    },\r\n  ],\r\n  [\r\n    \"violet\",\r\n    {\r\n      r: 238,\r\n      g: 130,\r\n      b: 238,\r\n    },\r\n  ],\r\n  [\r\n    \"wheat\",\r\n    {\r\n      r: 245,\r\n      g: 222,\r\n      b: 179,\r\n    },\r\n  ],\r\n  [\r\n    \"white\",\r\n    {\r\n      r: 255,\r\n      g: 255,\r\n      b: 255,\r\n    },\r\n  ],\r\n  [\r\n    \"whitesmoke\",\r\n    {\r\n      r: 245,\r\n      g: 245,\r\n      b: 245,\r\n    },\r\n  ],\r\n  [\r\n    \"yellow\",\r\n    {\r\n      r: 255,\r\n      g: 255,\r\n      b: 0,\r\n    },\r\n  ],\r\n  [\r\n    \"yellowgreen\",\r\n    {\r\n      r: 154,\r\n      g: 205,\r\n      b: 50,\r\n    },\r\n  ],\r\n];\r\n\r\nexport default webColors;\r\n", "// Hue angles\r\nconst ANGLES = \"deg|rad|grad|turn\";\r\n\r\n// <http://www.w3.org/TR/css3-values/#integers>\r\nconst CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n\r\n// Include CSS3 Module\r\n// <http://www.w3.org/TR/css3-values/#number-value>\r\nconst CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n\r\n// Include CSS4 Module Hue degrees unit\r\n// <https://www.w3.org/TR/css3-values/#angle-value>\r\nconst CSS_ANGLE = `[-\\\\+]?\\\\d*\\\\.?\\\\d+(?:${ANGLES})?`;\r\n\r\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\nconst CSS_UNIT = `(?:${CSS_NUMBER})|(?:${CSS_INTEGER})`;\r\n\r\n// Add angles to the mix\r\nconst CSS_UNIT2 = `(?:${CSS_UNIT})|(?:${CSS_ANGLE}?)`;\r\n\r\n// Start & end\r\nconst START_MATCH = \"(?:[\\\\s|\\\\(\\\\s|\\\\s\\\\(\\\\s]+)?\";\r\nconst END_MATCH = \"(?:[\\\\s|\\\\)\\\\s]+)?\";\r\n// Components separation\r\nconst SEP = \"(?:[,|\\\\s]+)\";\r\nconst SEP2 = \"(?:[,|\\\\/\\\\s]*)?\";\r\n\r\n// Actual matching.\r\n// Parentheses and commas are optional, but not required.\r\n// Whitespace can take the place of commas or opening paren\r\nconst PERMISSIVE_MATCH = `${START_MATCH}(${CSS_UNIT2})${SEP}(${CSS_UNIT})${SEP}(${CSS_UNIT})${SEP2}(${CSS_UNIT})?${END_MATCH}`;\r\n\r\nconst matchers = {\r\n  CSS_UNIT: new RegExp(CSS_UNIT2),\r\n  ANGLES,\r\n  CSS_ANGLE,\r\n  CSS_INTEGER,\r\n  CSS_NUMBER,\r\n  CSS_UNIT2,\r\n  PERMISSIVE_MATCH,\r\n  hwb: new RegExp(`hwb${PERMISSIVE_MATCH}`),\r\n  rgb: new RegExp(`rgb(?:a)?${PERMISSIVE_MATCH}`),\r\n  hsl: new RegExp(`hsl(?:a)?${PERMISSIVE_MATCH}`),\r\n  hsv: new RegExp(`hsv(?:a)?${PERMISSIVE_MATCH}`),\r\n  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n};\r\n\r\nexport default matchers;\r\n", "import nonColors from \"./nonColors\";\r\n\r\n/**\r\n * Check if a text is a valid CSS non-color value.\r\n */\r\nexport default function isNonColor(str: string): boolean {\r\n  return nonColors.includes(str);\r\n}\r\n", "import HSLALike from \"../interface/hslaLike\";\r\nimport HSVALike from \"../interface/hsvaLike\";\r\nimport HWBALike from \"../interface/hwbaLike\";\r\nimport RGBALike from \"../interface/rgbaLike\";\r\n\r\n/**\r\n * Check if a value is an instance of an RGB(a)/HSL(a)/HSV(a)/HWB(a) instance.\r\n */\r\nexport default function isColorType<T>(\r\n  obj: Partial<RGBALike | HSLALike | HSVALike | HWBALike>,\r\n  inst: T\r\n): obj is T {\r\n  return typeof obj === \"object\" && Object.keys(inst).every((c) => c in obj);\r\n}\r\n", "/**\r\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n */\r\nexport default function isOnePointZero(n: string | number): boolean {\r\n  return `${n}`.includes(\".\") && parseFloat(n as string) === 1;\r\n}\r\n", "/**\r\n * Check to see if string passed in is a percentage\r\n */\r\nexport default function isPercentage(n: string | number): boolean {\r\n  return typeof n === \"string\" && n.includes(\"%\");\r\n}\r\n", "import matchers from \"./matchers\";\r\n\r\n/**\r\n * Check to see if it looks like a CSS unit\r\n * (see `matchers` above for definition).\r\n */\r\nexport default function isValidCSSUnit(comp: string | number): boolean {\r\n  return Boolean(matchers.CSS_UNIT.exec(`${comp}`));\r\n}\r\n", "// Color supported formats\r\nconst COLOR_FORMAT = [\"rgb\", \"hex\", \"hsl\", \"hsv\", \"hwb\"];\r\n\r\nexport default COLOR_FORMAT;\r\n", "import nonColors from \"./nonColors\";\r\nimport COLOR_FORMAT from \"./colorFormat\";\r\nimport webColors from \"./webColors\";\r\n\r\n/**\r\n * Check to see if string passed is a web safe colour.\r\n * @see https://stackoverflow.com/a/16994164\r\n */\r\nexport default function isColorName(color: string): boolean {\r\n  if (\r\n    nonColors.includes(color) ||\r\n    [\"#\", ...COLOR_FORMAT].some((f) => color.includes(f))\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return webColors.some(([c]) => color === c);\r\n}\r\n", "import isOnePointZero from \"src/util/isOnePointZero\";\r\nimport isPercentage from \"src/util/isPercentage\";\r\n/**\r\n * Take input from [0, n] and return it as [0, 1]\r\n */\r\nexport default function bound01(N: string | number, max: number): number {\r\n  let n = N;\r\n\r\n  if (\r\n    typeof N === \"number\" &&\r\n    Math.min(N, 0) === 0 && // round values to 6 decimals Math.round(N * (10 ** 6)) / 10 ** 6\r\n    Math.max(N, 1) === 1\r\n  )\r\n    return N;\r\n\r\n  if (isOnePointZero(N)) n = \"100%\";\r\n\r\n  const processPercent = isPercentage(n);\r\n  n =\r\n    max === 360\r\n      ? parseFloat(n as string)\r\n      : Math.min(max, Math.max(0, parseFloat(n as string)));\r\n\r\n  // Automatically convert percentage into number\r\n  if (processPercent) n = (n * max) / 100;\r\n\r\n  // Handle floating point rounding errors\r\n  if (Math.abs(n - max) < 0.000001) {\r\n    return 1;\r\n  }\r\n  // Convert into [0, 1] range if it isn't already\r\n  if (max === 360) {\r\n    // If n is a hue given in degrees,\r\n    // wrap around out-of-range values into [0, 360] range\r\n    // then convert into [0, 1].\r\n    n = (n < 0 ? (n % max) + max : n % max) / max;\r\n  } else {\r\n    // If n not a hue given in degrees\r\n    // Convert into [0, 1] range if it isn't already.\r\n    n = (n % max) / max;\r\n  }\r\n  return n;\r\n}\r\n", "/**\r\n * Return a valid alpha value [0,1] with all invalid values being set to 1.\r\n */\r\nexport default function boundAlpha(a: string | number): number {\r\n  let na = parseFloat(a as string);\r\n\r\n  if (Number.isNaN(na) || na < 0 || na > 1) {\r\n    na = 1;\r\n  }\r\n\r\n  return na;\r\n}\r\n", "/**\r\n * Force a number between 0 and 1.\r\n */\r\nexport default function clamp01(v: number): number {\r\n  return Math.min(1, Math.max(0, v));\r\n}\r\n", "/**\r\n * Force a hexadecimal value to have 2 characters.\r\n */\r\nexport default function pad2(c: string): string {\r\n  return c.length === 1 ? `0${c}` : String(c);\r\n}\r\n", "import RGB from \"src/interface/rgb\";\r\nimport webColors from \"./webColors\";\r\n\r\n/**\r\n * Returns the RGB value of a web safe colour.\r\n */\r\nexport default function getRGBFromName(name: string): RGB {\r\n  const [[, rgbValue]] = webColors.filter(([k]) => k === name.toLowerCase());\r\n\r\n  return rgbValue;\r\n}\r\n", "/**\r\n * Converts a base-16 hexadecimal value into a base-10 integer.\r\n */\r\nexport default function parseIntFromHex(val: string): number {\r\n  return parseInt(val, 16);\r\n}\r\n", "import parseIntFromHex from \"./parseIntFromHex\";\r\n\r\n/**\r\n * Converts a hexadecimal value to decimal.\r\n */\r\nexport default function convertHexToDecimal(h: string): number {\r\n  return parseIntFromHex(h) / 255;\r\n}\r\n", "import roundPart from \"../util/roundPart\";\r\n\r\n/**\r\n * Converts a decimal value to hexadecimal.\r\n */\r\nexport default function convertDecimalToHex(d: number): string {\r\n  return roundPart(d * 255).toString(16);\r\n}\r\n", "import HSL from \"src/interface/hsl\";\r\n\r\n/**\r\n * Converts an RGB colour value to HSL.\r\n */\r\nexport default function rgbToHsl(r: number, g: number, b: number): HSL {\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  let h = 0;\r\n  let s = 0;\r\n  const l = (max + min) / 2;\r\n  if (max === min) {\r\n    s = 0;\r\n    h = 0; // achromatic\r\n  } else {\r\n    const d = max - min;\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n    if (max === r) h = (g - b) / d + (g < b ? 6 : 0);\r\n    if (max === g) h = (b - r) / d + 2;\r\n    if (max === b) h = (r - g) / d + 4;\r\n\r\n    h /= 6;\r\n  }\r\n  return { h, s, l };\r\n}\r\n", "/**\r\n * Returns a normalized RGB component value.\r\n */\r\nexport default function hueToRgb(p: number, q: number, t: number): number {\r\n  let T = t;\r\n  if (T < 0) T += 1;\r\n  if (T > 1) T -= 1;\r\n  if (T < 1 / 6) return p + (q - p) * (6 * T);\r\n  if (T < 1 / 2) return q;\r\n  if (T < 2 / 3) return p + (q - p) * (2 / 3 - T) * 6;\r\n  return p;\r\n}\r\n", "import hueToRgb from \"./hueToRgb\";\r\nimport RGB from \"../interface/rgb\";\r\n\r\n/**\r\n * Converts an HSL colour value to RGB.\r\n */\r\nexport default function hslToRgb(h: number, s: number, l: number): RGB {\r\n  let r = 0;\r\n  let g = 0;\r\n  let b = 0;\r\n\r\n  if (s === 0) {\r\n    // achromatic\r\n    g = l;\r\n    b = l;\r\n    r = l;\r\n  } else if (l) {\r\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    const p = 2 * l - q;\r\n    r = hueToRgb(p, q, h + 1 / 3);\r\n    g = hueToRgb(p, q, h);\r\n    b = hueToRgb(p, q, h - 1 / 3);\r\n  }\r\n\r\n  return { r, g, b };\r\n}\r\n", "import HWB from \"src/interface/hwb\";\r\n\r\n/**\r\n * Returns an HWB colour object from an RGB colour object.\r\n * @link https://www.w3.org/TR/css-color-4/#hwb-to-rgb\r\n * @link http://alvyray.com/Papers/CG/hwb2rgb.htm\r\n */\r\nexport default function rgbToHwb(r: number, g: number, b: number): HWB {\r\n  let f = 0;\r\n  let i = 0;\r\n  const whiteness = Math.min(r, g, b);\r\n  const max = Math.max(r, g, b);\r\n  const black = 1 - max;\r\n\r\n  if (max === whiteness) return { h: 0, w: whiteness, b: black };\r\n  if (r === whiteness) {\r\n    f = g - b;\r\n    i = 3;\r\n  } else {\r\n    f = g === whiteness ? b - r : r - g;\r\n    i = g === whiteness ? 5 : 1;\r\n  }\r\n\r\n  const h = (i - f / (max - whiteness)) / 6;\r\n  return {\r\n    h: h === 1 ? 0 : h,\r\n    w: whiteness,\r\n    b: black,\r\n  };\r\n}\r\n", "import RGB from \"../interface/rgb\";\r\nimport hslToRgb from \"./hslToRgb\";\r\n\r\n/**\r\n * Returns an RGB colour object from an HWB colour.\r\n *\r\n * @link https://www.w3.org/TR/css-color-4/#hwb-to-rgb\r\n * @link http://alvyray.com/Papers/CG/hwb2rgb.htm\r\n */\r\nexport default function hwbToRgb(H: number, W: number, B: number): RGB {\r\n  if (W + B >= 1) {\r\n    const gray = W / (W + B);\r\n    return { r: gray, g: gray, b: gray };\r\n  }\r\n  let { r, g, b } = hslToRgb(H, 1, 0.5);\r\n  [r, g, b] = [r, g, b].map((v) => v * (1 - W - B) + W);\r\n\r\n  return { r, g, b };\r\n}\r\n", "import HSV from \"src/interface/hsv\";\r\n\r\n/**\r\n * Converts an RGB colour value to HSV.\r\n */\r\nexport default function rgbToHsv(r: number, g: number, b: number): HSV {\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  let h = 0;\r\n  const v = max;\r\n  const d = max - min;\r\n  const s = max === 0 ? 0 : d / max;\r\n  if (max === min) {\r\n    h = 0; // achromatic\r\n  } else {\r\n    if (r === max) h = (g - b) / d + (g < b ? 6 : 0);\r\n    if (g === max) h = (b - r) / d + 2;\r\n    if (b === max) h = (r - g) / d + 4;\r\n\r\n    h /= 6;\r\n  }\r\n  return { h, s, v };\r\n}\r\n", "import RGB from \"../interface/rgb\";\r\n\r\n/**\r\n * Converts an HSV colour value to RGB.\r\n */\r\nexport default function hsvToRgb(H: number, S: number, V: number): RGB {\r\n  const h = H * 6;\r\n  const s = S;\r\n  const v = V;\r\n  const i = Math.floor(h);\r\n  const f = h - i;\r\n  const p = v * (1 - s);\r\n  const q = v * (1 - f * s);\r\n  const t = v * (1 - (1 - f) * s);\r\n  const mod = i % 6;\r\n  const r = [v, q, p, p, t, v][mod];\r\n  const g = [t, v, v, q, p, p][mod];\r\n  const b = [p, p, t, v, v, q][mod];\r\n  return { r, g, b };\r\n}\r\n", "import pad2 from \"../util/pad2\";\r\nimport roundPart from \"../util/roundPart\";\r\n\r\n/**\r\n * Converts an RGB colour to hex\r\n *\r\n * Assumes r, g, and b are contained in the set [0, 255]\r\n * Returns a 3 or 6 character hex\r\n */\r\nexport default function rgbToHex(\r\n  r: number,\r\n  g: number,\r\n  b: number,\r\n  allow3Char?: boolean\r\n): string {\r\n  const hex = [\r\n    pad2(roundPart(r).toString(16)),\r\n    pad2(roundPart(g).toString(16)),\r\n    pad2(roundPart(b).toString(16)),\r\n  ];\r\n\r\n  // Return a 3 character hex if possible\r\n  if (\r\n    allow3Char &&\r\n    hex[0].charAt(0) === hex[0].charAt(1) &&\r\n    hex[1].charAt(0) === hex[1].charAt(1) &&\r\n    hex[2].charAt(0) === hex[2].charAt(1)\r\n  ) {\r\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n  }\r\n\r\n  return hex.join(\"\");\r\n}\r\n", "import pad2 from \"../util/pad2\";\r\nimport roundPart from \"../util/roundPart\";\r\nimport convertDecimalToHex from \"./convertDecimalToHex\";\r\n\r\n/**\r\n * Converts an RGBA color plus alpha transparency to hex8.\r\n */\r\nexport default function rgbaToHex(\r\n  r: number,\r\n  g: number,\r\n  b: number,\r\n  a: number,\r\n  allow4Char?: boolean\r\n): string {\r\n  const hex = [\r\n    pad2(roundPart(r).toString(16)),\r\n    pad2(roundPart(g).toString(16)),\r\n    pad2(roundPart(b).toString(16)),\r\n    pad2(convertDecimalToHex(a)),\r\n  ];\r\n\r\n  // Return a 4 character hex if possible\r\n  if (\r\n    allow4Char &&\r\n    hex[0].charAt(0) === hex[0].charAt(1) &&\r\n    hex[1].charAt(0) === hex[1].charAt(1) &&\r\n    hex[2].charAt(0) === hex[2].charAt(1) &&\r\n    hex[3].charAt(0) === hex[3].charAt(1)\r\n  ) {\r\n    return (\r\n      hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0)\r\n    );\r\n  }\r\n  return hex.join(\"\");\r\n}\r\n", "import RGBALike from \"src/interface/rgbaLike\";\r\nimport HSLALike from \"src/interface/hslaLike\";\r\nimport HWBALike from \"src/interface/hwbaLike\";\r\nimport HSVALike from \"src/interface/hsvaLike\";\r\n\r\nimport isColorName from \"./isColorName\";\r\nimport isNonColor from \"./isNonColor\";\r\nimport getRGBFromName from \"./getRGBFromName\";\r\nimport matchers from \"./matchers\";\r\nimport parseIntFromHex from \"../convert/parseIntFromHex\";\r\nimport convertHexToDecimal from \"../convert/convertHexToDecimal\";\r\n\r\n/**\r\n * Permissive string parsing. Take in a number of formats, and output an object\r\n * based on detected format. Returns {r,g,b} or {h,s,l} or {h,s,v}\r\n */\r\nexport default function stringInputToObject(\r\n  input?: string\r\n): RGBALike | HSLALike | HSVALike | HWBALike {\r\n  const color: string = String(input).trim().toLowerCase();\r\n\r\n  if (isColorName(color)) {\r\n    return Object.assign(getRGBFromName(color), {\r\n      a: 1,\r\n      format: \"rgb\",\r\n      ok: true,\r\n    });\r\n  }\r\n  if (isNonColor(color)) {\r\n    const a = color === \"transparent\" ? 0 : 1;\r\n    return {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n      a,\r\n      format: \"rgb\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  // Try to match string input using regular expressions.\r\n  // Keep most of the number bounding out of this function,\r\n  //   don't worry about [0,1] or [0,100] or [0,360]\r\n  // Just return an object and let the conversion functions handle that.\r\n  // This way the result will be the same whether Color is initialized with string or object.\r\n  let [, m1, m2, m3, m4] = matchers.rgb.exec(color) || [];\r\n  if (m1 && m2 && m3 /* && m4 */) {\r\n    return {\r\n      r: m1,\r\n      g: m2,\r\n      b: m3,\r\n      a: m4 !== undefined ? m4 : 1,\r\n      format: \"rgb\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  [, m1, m2, m3, m4] = matchers.hsl.exec(color) || [];\r\n  if (m1 && m2 && m3 /* && m4 */) {\r\n    return {\r\n      h: m1,\r\n      s: m2,\r\n      l: m3,\r\n      a: m4 !== undefined ? m4 : 1,\r\n      format: \"hsl\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  [, m1, m2, m3, m4] = matchers.hsv.exec(color) || [];\r\n  if (m1 && m2 && m3 /* && m4 */) {\r\n    return {\r\n      h: m1,\r\n      s: m2,\r\n      v: m3,\r\n      a: m4 !== undefined ? m4 : 1,\r\n      format: \"hsv\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  [, m1, m2, m3, m4] = matchers.hwb.exec(color) || [];\r\n  if (m1 && m2 && m3) {\r\n    return {\r\n      h: m1,\r\n      w: m2,\r\n      b: m3,\r\n      a: m4 !== undefined ? m4 : 1,\r\n      format: \"hwb\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  [, m1, m2, m3, m4] = matchers.hex8.exec(color) || [];\r\n  if (m1 && m2 && m3 && m4) {\r\n    return {\r\n      r: parseIntFromHex(m1),\r\n      g: parseIntFromHex(m2),\r\n      b: parseIntFromHex(m3),\r\n      a: convertHexToDecimal(m4),\r\n      format: \"hex\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  [, m1, m2, m3] = matchers.hex6.exec(color) || [];\r\n  if (m1 && m2 && m3) {\r\n    return {\r\n      r: parseIntFromHex(m1),\r\n      g: parseIntFromHex(m2),\r\n      b: parseIntFromHex(m3),\r\n      a: 1,\r\n      format: \"hex\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  [, m1, m2, m3, m4] = matchers.hex4.exec(color) || [];\r\n  if (m1 && m2 && m3 && m4) {\r\n    return {\r\n      r: parseIntFromHex(m1 + m1),\r\n      g: parseIntFromHex(m2 + m2),\r\n      b: parseIntFromHex(m3 + m3),\r\n      a: convertHexToDecimal(m4 + m4),\r\n      format: \"hex\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  [, m1, m2, m3] = matchers.hex3.exec(color) || [];\r\n  if (m1 && m2 && m3) {\r\n    return {\r\n      r: parseIntFromHex(m1 + m1),\r\n      g: parseIntFromHex(m2 + m2),\r\n      b: parseIntFromHex(m3 + m3),\r\n      a: 1,\r\n      format: \"hex\",\r\n      ok: true,\r\n    };\r\n  }\r\n\r\n  return {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    a: 1,\r\n    format: \"rgb\",\r\n    ok: !input ? true : false,\r\n  };\r\n}\r\n", "import ColorInputTypes from \"./colorInputTypes\";\r\nimport RGBAObject from \"../interface/rgbaObject\";\r\nimport stringInputToObject from \"./stringInputToObject\";\r\nimport isColorType from \"./isColorType\";\r\nimport isValidCSSUnit from \"./isValidCSSUnit\";\r\nimport isPercentage from \"./isPercentage\";\r\nimport bound01 from \"./bound01\";\r\nimport boundAlpha from \"./boundAlpha\";\r\nimport hsvToRgb from \"../convert/hsvToRgb\";\r\nimport hslToRgb from \"../convert/hslToRgb\";\r\nimport hwbToRgb from \"../convert/hwbToRgb\";\r\n\r\n/**\r\n * Given a string or object, convert that input to RGB\r\n *\r\n * Possible string inputs:\r\n * ```\r\n * \"red\"\r\n * \"#f00\" or \"f00\"\r\n * \"#ff0000\" or \"ff0000\"\r\n * \"#ff000000\" or \"ff000000\" // CSS4 Module\r\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n * \"rgba(255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n * \"rgba(1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n * \"rgb(255 0 0 / 10%)\" or \"rgb 255 0 0 0.1\" // CSS4 Module\r\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n * \"hsl(0deg 100% 50% / 50%)\" or \"hsl 0 100 50 50\" // CSS4 Module\r\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n * \"hsva(0, 100%, 100%, 0.1)\" or \"hsva 0 100% 100% 0.1\"\r\n * \"hsv(0deg 100% 100% / 10%)\" or \"hsv 0 100 100 0.1\" // CSS4 Module\r\n * \"hwb(0deg, 100%, 100%, 100%)\" or \"hwb 0 100% 100% 0.1\" // CSS4 Module\r\n * ```\r\n */\r\nexport default function inputToRGB(input: ColorInputTypes): RGBAObject {\r\n  let rgb = { r: 0, g: 0, b: 0 };\r\n  let color = input;\r\n  let a = 1;\r\n  let s: number;\r\n  let v: number;\r\n  let l: number;\r\n  let w: number;\r\n  let b: number;\r\n  let h: number;\r\n  let r: number;\r\n  let g: number;\r\n  let format = \"rgb\";\r\n  let ok = false;\r\n\r\n  if (!color || typeof color === \"string\") {\r\n    color = stringInputToObject(color as string);\r\n    ok = (color as RGBAObject).ok;\r\n  }\r\n\r\n  if (\r\n    isColorType(color, rgb) &&\r\n    isValidCSSUnit(color.r) &&\r\n    isValidCSSUnit(color.g) &&\r\n    isValidCSSUnit(color.b)\r\n  ) {\r\n    ({ r, g, b } = color);\r\n    // RGB values now are all in [0, 1] range\r\n    [r, g, b] = [r, g, b].map((n) => bound01(n, isPercentage(n) ? 100 : 255));\r\n    rgb = { r, g, b };\r\n    format = \"format\" in color ? (color as RGBAObject).format : \"rgb\";\r\n  }\r\n  if (\r\n    isColorType(color, { h: 0, s: 0, v: 0 }) &&\r\n    isValidCSSUnit(color.h) &&\r\n    isValidCSSUnit(color.s) &&\r\n    isValidCSSUnit(color.v)\r\n  ) {\r\n    ({ h, s, v } = color);\r\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\r\n    s = bound01(s, 100); // saturation can be `5%` or a [0, 1] value\r\n    v = bound01(v, 100); // brightness can be `5%` or a [0, 1] value\r\n    rgb = hsvToRgb(h, s, v);\r\n    format = \"hsv\";\r\n  }\r\n  if (\r\n    isColorType(color, { h: 0, s: 0, l: 0 }) &&\r\n    isValidCSSUnit(color.h) &&\r\n    isValidCSSUnit(color.s) &&\r\n    isValidCSSUnit(color.l)\r\n  ) {\r\n    ({ h, s, l } = color);\r\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\r\n    s = bound01(s, 100); // saturation can be `5%` or a [0, 1] value\r\n    l = bound01(l, 100); // lightness can be `5%` or a [0, 1] value\r\n    rgb = hslToRgb(h, s, l);\r\n    format = \"hsl\";\r\n  }\r\n  if (\r\n    isColorType(color, { h: 0, w: 0, b: 0 }) &&\r\n    isValidCSSUnit(color.h) &&\r\n    isValidCSSUnit(color.w) &&\r\n    isValidCSSUnit(color.b)\r\n  ) {\r\n    ({ h, w, b } = color);\r\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\r\n    w = bound01(w, 100); // whiteness can be `5%` or a [0, 1] value\r\n    b = bound01(b, 100); // blackness can be `5%` or a [0, 1] value\r\n    rgb = hwbToRgb(h, w, b);\r\n    format = \"hwb\";\r\n  }\r\n\r\n  if (isValidCSSUnit((color as RGBAObject).a)) {\r\n    a = (color as RGBAObject).a;\r\n    a = isPercentage(a) || parseFloat(`${a}`) > 1 ? bound01(a, 100) : a;\r\n  }\r\n\r\n  return {\r\n    r: rgb.r,\r\n    g: rgb.g,\r\n    b: rgb.b,\r\n    a: boundAlpha(a),\r\n    format,\r\n    ok,\r\n  };\r\n}\r\n", "import nonColors from \"./util/nonColors\";\r\nimport roundPart from \"./util/roundPart\";\r\nimport webColors from \"./util/webColors\";\r\nimport RGBA from \"./interface/rgba\";\r\nimport HSLA from \"./interface/hsla\";\r\nimport HSVA from \"./interface/hsva\";\r\nimport HWBA from \"./interface/hwba\";\r\nimport matchers from \"./util/matchers\";\r\nimport isNonColor from \"./util/isNonColor\";\r\nimport isColorType from \"./util/isColorType\";\r\nimport isOnePointZero from \"./util/isOnePointZero\";\r\nimport isPercentage from \"./util/isPercentage\";\r\nimport isValidCSSUnit from \"./util/isValidCSSUnit\";\r\nimport isColorName from \"./util/isColorName\";\r\nimport bound01 from \"./util/bound01\";\r\nimport boundAlpha from \"./util/boundAlpha\";\r\nimport clamp01 from \"./util/clamp01\";\r\nimport pad2 from \"./util/pad2\";\r\nimport COLOR_FORMAT from \"./util/colorFormat\";\r\nimport getRGBFromName from \"./util/getRGBFromName\";\r\nimport convertHexToDecimal from \"./convert/convertHexToDecimal\";\r\nimport convertDecimalToHex from \"./convert/convertDecimalToHex\";\r\nimport parseIntFromHex from \"./convert/parseIntFromHex\";\r\nimport ColorFormats from \"./util/colorFormats\";\r\nimport ColorInputTypes from \"./util/colorInputTypes\";\r\nimport rgbToHsl from \"./convert/rgbToHsl\";\r\nimport hueToRgb from \"./convert/hueToRgb\";\r\nimport hslToRgb from \"./convert/hslToRgb\";\r\nimport rgbToHwb from \"./convert/rgbToHwb\";\r\nimport hwbToRgb from \"./convert/hwbToRgb\";\r\nimport rgbToHsv from \"./convert/rgbToHsv\";\r\nimport hsvToRgb from \"./convert/hsvToRgb\";\r\nimport rgbToHex from \"./convert/rgbToHex\";\r\nimport rgbaToHex from \"./convert/rgbaToHex\";\r\nimport stringInputToObject from \"./util/stringInputToObject\";\r\nimport inputToRGB from \"./util/inputToRgb\";\r\n\r\n/**\r\n * Returns a new `Color` instance.\r\n * @see https://github.com/bgrins/TinyColor\r\n */\r\nexport default class Color {\r\n  public r: number;\r\n  public g: number;\r\n  public b: number;\r\n  public a: number;\r\n  public format: string;\r\n  public ok: boolean;\r\n  public originalInput: string | Color | ColorInputTypes;\r\n\r\n  constructor(input?: ColorInputTypes | Partial<Color>, config?: ColorFormats) {\r\n    const configFormat = config && COLOR_FORMAT.includes(config) ? config : \"\";\r\n\r\n    // If input is already a `Color` or compatible object, clone its values\r\n    const { r, g, b, a, ok, format } = inputToRGB(input);\r\n\r\n    this.originalInput = input;\r\n    this.r = r;\r\n    this.g = g;\r\n    this.b = b;\r\n    this.a = a;\r\n    this.ok = ok;\r\n    this.format = configFormat || format;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current input value is a valid colour.\r\n   */\r\n  get isValid(): boolean {\r\n    return this.ok;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current colour requires a light text colour.\r\n   */\r\n  get isDark(): boolean {\r\n    return this.brightness < 120;\r\n  }\r\n\r\n  /**\r\n   * Returns the perceived luminance of a colour.\r\n   * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\r\n   */\r\n  get luminance(): number {\r\n    const { r, g, b } = this;\r\n    let R = 0;\r\n    let G = 0;\r\n    let B = 0;\r\n\r\n    if (r <= 0.03928) {\r\n      R = r / 12.92;\r\n    } else {\r\n      R = ((r + 0.055) / 1.055) ** 2.4;\r\n    }\r\n    if (g <= 0.03928) {\r\n      G = g / 12.92;\r\n    } else {\r\n      G = ((g + 0.055) / 1.055) ** 2.4;\r\n    }\r\n    if (b <= 0.03928) {\r\n      B = b / 12.92;\r\n    } else {\r\n      B = ((b + 0.055) / 1.055) ** 2.4;\r\n    }\r\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n  }\r\n\r\n  /**\r\n   * Returns the perceived brightness of the colour.\r\n   */\r\n  get brightness(): number {\r\n    const { r, g, b } = this.toRgb();\r\n    return (r * 299 + g * 587 + b * 114) / 1000;\r\n  }\r\n\r\n  /**\r\n   * Returns the web colour name closest to the current colour.\r\n   */\r\n  get name(): string {\r\n    const { r, g, b } = this.toRgb();\r\n    const [colorName] = webColors\r\n      .map(([name, rgb]): [string, number] => {\r\n        const distance = Math.sqrt(\r\n          (rgb.r - r) ** 2 + (rgb.g - g) ** 2 + (rgb.b - b) ** 2\r\n        );\r\n        return [name, distance];\r\n      })\r\n      .find(([, distance], i, ar) => {\r\n        return distance === Math.min(...ar.map(([, d]) => d));\r\n      });\r\n\r\n    return colorName;\r\n  }\r\n\r\n  /**\r\n   * Returns the colour as an RGBA object.\r\n   */\r\n  toRgb(): RGBA {\r\n    let { r, g, b, a } = this;\r\n\r\n    [r, g, b] = [r, g, b].map((n) => roundPart(n * 255 * 100) / 100);\r\n    a = roundPart(a * 100) / 100;\r\n    return {\r\n      r,\r\n      g,\r\n      b,\r\n      a,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the RGBA values concatenated into a CSS3 Module string format.\r\n   * * rgb(255,255,255)\r\n   * * rgba(255,255,255,0.5)\r\n   */\r\n  toRgbString(): string {\r\n    const { r, g, b, a } = this.toRgb();\r\n    const [R, G, B] = [r, g, b].map(roundPart);\r\n\r\n    return a === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${a})`;\r\n  }\r\n\r\n  /**\r\n   * Returns the RGBA values concatenated into a CSS4 Module string format.\r\n   * * rgb(255 255 255)\r\n   * * rgb(255 255 255 / 50%)\r\n   */\r\n  toRgbCSS4String(): string {\r\n    const { r, g, b, a } = this.toRgb();\r\n    const [R, G, B] = [r, g, b].map(roundPart);\r\n    const A = a === 1 ? \"\" : ` / ${roundPart(a * 100)}%`;\r\n\r\n    return `rgb(${R} ${G} ${B}${A})`;\r\n  }\r\n\r\n  /**\r\n   * Returns the hexadecimal value of the colour. When the parameter is *true*\r\n   * it will find a 3 characters shorthand of the decimal value.\r\n   */\r\n  toHex(allow3Char?: boolean | undefined): string {\r\n    const { r, g, b, a } = this.toRgb();\r\n\r\n    return a === 1\r\n      ? rgbToHex(r, g, b, allow3Char)\r\n      : rgbaToHex(r, g, b, a, allow3Char);\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS valid hexadecimal vaue of the colour. When the parameter is *true*\r\n   * it will find a 3 characters shorthand of the value.\r\n   */\r\n  toHexString(allow3Char?: boolean | undefined): string {\r\n    return `#${this.toHex(allow3Char)}`;\r\n  }\r\n\r\n  /**\r\n   * Returns the HEX8 value of the colour.\r\n   */\r\n  toHex8(allow4Char?: boolean | undefined): string {\r\n    const { r, g, b, a } = this.toRgb();\r\n\r\n    return rgbaToHex(r, g, b, a, allow4Char);\r\n  }\r\n\r\n  /**\r\n   * Returns the HEX8 value of the colour.\r\n   */\r\n  toHex8String(allow4Char?: boolean | undefined): string {\r\n    return `#${this.toHex8(allow4Char)}`;\r\n  }\r\n\r\n  /**\r\n   * Returns the colour as a HSVA object.\r\n   */\r\n  toHsv(): HSVA {\r\n    const { r, g, b, a } = this;\r\n    const { h, s, v } = rgbToHsv(r, g, b);\r\n\r\n    return {\r\n      h,\r\n      s,\r\n      v,\r\n      a,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the colour as an HSLA object.\r\n   */\r\n  toHsl(): HSLA {\r\n    const { r, g, b, a } = this;\r\n    const { h, s, l } = rgbToHsl(r, g, b);\r\n\r\n    return {\r\n      h,\r\n      s,\r\n      l,\r\n      a,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the HSLA values concatenated into a CSS3 Module format string.\r\n   * * `hsl(150, 100%, 50%)`\r\n   * * `hsla(150, 100%, 50%, 0.5)`\r\n   */\r\n  toHslString(): string {\r\n    let { h, s, l, a } = this.toHsl();\r\n    h = roundPart(h * 360);\r\n    s = roundPart(s * 100);\r\n    l = roundPart(l * 100);\r\n    a = roundPart(a * 100) / 100;\r\n\r\n    return a === 1\r\n      ? `hsl(${h}, ${s}%, ${l}%)`\r\n      : `hsla(${h}, ${s}%, ${l}%, ${a})`;\r\n  }\r\n\r\n  /**\r\n   * Returns the HSLA values concatenated into a CSS4 Module format string.\r\n   * * `hsl(150deg 100% 50%)`\r\n   * * `hsl(150deg 100% 50% / 50%)`\r\n   */\r\n  toHslCSS4String(): string {\r\n    let { h, s, l, a } = this.toHsl();\r\n    h = roundPart(h * 360);\r\n    s = roundPart(s * 100);\r\n    l = roundPart(l * 100);\r\n    a = roundPart(a * 100);\r\n    const A = a < 100 ? ` / ${roundPart(a)}%` : \"\";\r\n\r\n    return `hsl(${h}deg ${s}% ${l}%${A})`;\r\n  }\r\n\r\n  /**\r\n   * Returns the colour as an HWBA object.\r\n   */\r\n  toHwb(): HWBA {\r\n    const { r, g, b, a } = this;\r\n    const { h, w, b: bl } = rgbToHwb(r, g, b);\r\n    return {\r\n      h,\r\n      w,\r\n      b: bl,\r\n      a,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the HWBA values concatenated into a string.\r\n   */\r\n  toHwbString(): string {\r\n    let { h, w, b, a } = this.toHwb();\r\n    h = roundPart(h * 360);\r\n    w = roundPart(w * 100);\r\n    b = roundPart(b * 100);\r\n    a = roundPart(a * 100);\r\n    const A = a < 100 ? ` / ${roundPart(a)}%` : \"\";\r\n\r\n    return `hwb(${h}deg ${w}% ${b}%${A})`;\r\n  }\r\n\r\n  /**\r\n   * Sets the alpha value of the current colour.\r\n   */\r\n  setAlpha(alpha?: number): Color {\r\n    if (typeof alpha !== \"number\") return this;\r\n    this.a = boundAlpha(alpha);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Saturate the colour with a given amount.\r\n   */\r\n  saturate(amount?: number): Color {\r\n    if (typeof amount !== \"number\") return this;\r\n    const { h, s, l } = this.toHsl();\r\n    const { r, g, b } = hslToRgb(h, clamp01(s + amount / 100), l);\r\n\r\n    Object.assign(this, { r, g, b });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Desaturate the colour with a given amount.\r\n   */\r\n  desaturate(amount?: number): Color {\r\n    return typeof amount === \"number\" ? this.saturate(-amount) : this;\r\n  }\r\n\r\n  /**\r\n   * Completely desaturates a colour into greyscale.\r\n   * Same as calling `desaturate(100)`\r\n   */\r\n  greyscale(): Color {\r\n    return this.saturate(-100);\r\n  }\r\n\r\n  /**\r\n   * Increase the colour lightness with a given amount.\r\n   */\r\n  lighten(amount?: number): Color {\r\n    if (typeof amount !== \"number\") return this;\r\n\r\n    const { h, s, l } = this.toHsl();\r\n    const { r, g, b } = hslToRgb(h, s, clamp01(l + amount / 100));\r\n\r\n    Object.assign(this, { r, g, b });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Decrease the colour lightness with a given amount.\r\n   */\r\n  darken(amount?: number): Color {\r\n    return typeof amount === \"number\" ? this.lighten(-amount) : this;\r\n  }\r\n\r\n  /**\r\n   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n   * Values outside of this range will be wrapped into this range.\r\n   */\r\n  spin(amount?: number): Color {\r\n    if (typeof amount !== \"number\") return this;\r\n\r\n    const { h, s, l } = this.toHsl();\r\n    const { r, g, b } = hslToRgb(\r\n      clamp01(((h * 360 + amount) % 360) / 360),\r\n      s,\r\n      l\r\n    );\r\n\r\n    Object.assign(this, { r, g, b });\r\n    return this;\r\n  }\r\n\r\n  /** Returns a clone of the current `Color` instance. */\r\n  clone(): Color {\r\n    return new Color(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the colour value in CSS valid string format.\r\n   */\r\n  toString(allowShort?: boolean | undefined): string {\r\n    const { format } = this;\r\n\r\n    if (format === \"hex\") return this.toHexString(allowShort);\r\n    if (format === \"hsl\") return this.toHslString();\r\n    if (format === \"hwb\") return this.toHwbString();\r\n\r\n    return this.toRgbString();\r\n  }\r\n}\r\n\r\nObject.assign(Color, {\r\n  matchers,\r\n  isOnePointZero,\r\n  isPercentage,\r\n  isValidCSSUnit,\r\n  isNonColor,\r\n  isColorName,\r\n  isColorType,\r\n  pad2,\r\n  clamp01,\r\n  bound01,\r\n  boundAlpha,\r\n  getRGBFromName,\r\n  convertHexToDecimal,\r\n  convertDecimalToHex,\r\n  rgbToHsl,\r\n  rgbToHex,\r\n  rgbToHsv,\r\n  rgbToHwb,\r\n  rgbaToHex,\r\n  hslToRgb,\r\n  hsvToRgb,\r\n  hueToRgb,\r\n  hwbToRgb,\r\n  parseIntFromHex,\r\n  stringInputToObject,\r\n  inputToRGB,\r\n  roundPart,\r\n  webColors,\r\n  nonColors,\r\n});\r\n"],
  "mappings": ";;;;;;AAGA,IAAM,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,IAAO,oBAAQ;;;ACPA,mBAAmB,GAAmB;AACnD,QAAM,QAAQ,KAAK,MAAM,CAAC;AAC1B,SAAO,IAAI,QAAQ,MAAM,QAAQ,KAAK,MAAM,CAAC;AAC/C;;;ACAA,IAAM,YAA6B;AAAA,EACjC;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,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",
  "names": []
}
