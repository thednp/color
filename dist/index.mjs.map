{"version":3,"file":"index.mjs","sources":["../src/util/nonColors.ts","../src/util/roundPart.ts","../src/util/webColors.ts","../src/util/matchers.ts","../src/util/isNonColor.ts","../src/util/isColorType.ts","../src/util/isOnePointZero.ts","../src/util/isPercentage.ts","../src/util/isValidCSSUnit.ts","../src/util/colorFormat.ts","../src/util/isColorName.ts","../src/util/bound01.ts","../src/util/boundAlpha.ts","../src/util/clamp01.ts","../src/util/pad2.ts","../src/util/getRGBFromName.ts","../src/convert/parseIntFromHex.ts","../src/convert/convertHexToDecimal.ts","../src/convert/convertDecimalToHex.ts","../src/convert/rgbToHsl.ts","../src/convert/hueToRgb.ts","../src/convert/hslToRgb.ts","../src/convert/rgbToHwb.ts","../src/convert/hwbToRgb.ts","../src/convert/rgbToHsv.ts","../src/convert/hsvToRgb.ts","../src/convert/rgbToHex.ts","../src/convert/rgbaToHex.ts","../src/util/stringInputToObject.ts","../src/util/inputToRgb.ts","../src/index.ts"],"sourcesContent":["/**\n * A list of explicit default non-color values.\n */\nconst nonColors = [\n  \"transparent\",\n  \"currentColor\",\n  \"inherit\",\n  \"revert\",\n  \"initial\",\n];\nexport default nonColors;\n","/**\n * Round colour components, for all formats except HEX.\n */\nexport default function roundPart(v: number): number {\n  const floor = Math.floor(v);\n  return v - floor < 0.5 ? floor : Math.round(v);\n}\n","import RGB from \"../interface/rgb\";\n\n/**\n * 148 Web Colors\n * <https://en.wikipedia.org/wiki/Web_colors>\n */\nconst webColors: [string, RGB][] = [\n  [\n    \"aliceblue\",\n    {\n      r: 240,\n      g: 248,\n      b: 255,\n    },\n  ],\n  [\n    \"antiquewhite\",\n    {\n      r: 250,\n      g: 235,\n      b: 215,\n    },\n  ],\n  [\n    \"aqua\",\n    {\n      r: 0,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    \"aquamarine\",\n    {\n      r: 127,\n      g: 255,\n      b: 212,\n    },\n  ],\n  [\n    \"azure\",\n    {\n      r: 240,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    \"beige\",\n    {\n      r: 245,\n      g: 245,\n      b: 220,\n    },\n  ],\n  [\n    \"bisque\",\n    {\n      r: 255,\n      g: 228,\n      b: 196,\n    },\n  ],\n  [\n    \"black\",\n    {\n      r: 0,\n      g: 0,\n      b: 0,\n    },\n  ],\n  [\n    \"blanchedalmond\",\n    {\n      r: 255,\n      g: 235,\n      b: 205,\n    },\n  ],\n  [\n    \"blue\",\n    {\n      r: 0,\n      g: 0,\n      b: 255,\n    },\n  ],\n  [\n    \"blueviolet\",\n    {\n      r: 138,\n      g: 43,\n      b: 226,\n    },\n  ],\n  [\n    \"brown\",\n    {\n      r: 165,\n      g: 42,\n      b: 42,\n    },\n  ],\n  [\n    \"burlywood\",\n    {\n      r: 222,\n      g: 184,\n      b: 135,\n    },\n  ],\n  [\n    \"cadetblue\",\n    {\n      r: 95,\n      g: 158,\n      b: 160,\n    },\n  ],\n  [\n    \"chartreuse\",\n    {\n      r: 127,\n      g: 255,\n      b: 0,\n    },\n  ],\n  [\n    \"chocolate\",\n    {\n      r: 210,\n      g: 105,\n      b: 30,\n    },\n  ],\n  [\n    \"coral\",\n    {\n      r: 255,\n      g: 127,\n      b: 80,\n    },\n  ],\n  [\n    \"cornflowerblue\",\n    {\n      r: 100,\n      g: 149,\n      b: 237,\n    },\n  ],\n  [\n    \"cornsilk\",\n    {\n      r: 255,\n      g: 248,\n      b: 220,\n    },\n  ],\n  [\n    \"crimson\",\n    {\n      r: 220,\n      g: 20,\n      b: 60,\n    },\n  ],\n  [\n    \"cyan\",\n    {\n      r: 0,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    \"darkblue\",\n    {\n      r: 0,\n      g: 0,\n      b: 139,\n    },\n  ],\n  [\n    \"darkcyan\",\n    {\n      r: 0,\n      g: 139,\n      b: 139,\n    },\n  ],\n  [\n    \"darkgoldenrod\",\n    {\n      r: 184,\n      g: 134,\n      b: 11,\n    },\n  ],\n  [\n    \"darkgray\",\n    {\n      r: 169,\n      g: 169,\n      b: 169,\n    },\n  ],\n  [\n    \"darkgreen\",\n    {\n      r: 0,\n      g: 100,\n      b: 0,\n    },\n  ],\n  [\n    \"darkgrey\",\n    {\n      r: 169,\n      g: 169,\n      b: 169,\n    },\n  ],\n  [\n    \"darkkhaki\",\n    {\n      r: 189,\n      g: 183,\n      b: 107,\n    },\n  ],\n  [\n    \"darkmagenta\",\n    {\n      r: 139,\n      g: 0,\n      b: 139,\n    },\n  ],\n  [\n    \"darkolivegreen\",\n    {\n      r: 85,\n      g: 107,\n      b: 47,\n    },\n  ],\n  [\n    \"darkorange\",\n    {\n      r: 255,\n      g: 140,\n      b: 0,\n    },\n  ],\n  [\n    \"darkorchid\",\n    {\n      r: 153,\n      g: 50,\n      b: 204,\n    },\n  ],\n  [\n    \"darkred\",\n    {\n      r: 139,\n      g: 0,\n      b: 0,\n    },\n  ],\n  [\n    \"darksalmon\",\n    {\n      r: 233,\n      g: 150,\n      b: 122,\n    },\n  ],\n  [\n    \"darkseagreen\",\n    {\n      r: 143,\n      g: 188,\n      b: 143,\n    },\n  ],\n  [\n    \"darkslateblue\",\n    {\n      r: 72,\n      g: 61,\n      b: 139,\n    },\n  ],\n  [\n    \"darkslategray\",\n    {\n      r: 47,\n      g: 79,\n      b: 79,\n    },\n  ],\n  [\n    \"darkslategrey\",\n    {\n      r: 47,\n      g: 79,\n      b: 79,\n    },\n  ],\n  [\n    \"darkturquoise\",\n    {\n      r: 0,\n      g: 206,\n      b: 209,\n    },\n  ],\n  [\n    \"darkviolet\",\n    {\n      r: 148,\n      g: 0,\n      b: 211,\n    },\n  ],\n  [\n    \"deeppink\",\n    {\n      r: 255,\n      g: 20,\n      b: 147,\n    },\n  ],\n  [\n    \"deepskyblue\",\n    {\n      r: 0,\n      g: 191,\n      b: 255,\n    },\n  ],\n  [\n    \"dimgray\",\n    {\n      r: 105,\n      g: 105,\n      b: 105,\n    },\n  ],\n  [\n    \"dimgrey\",\n    {\n      r: 105,\n      g: 105,\n      b: 105,\n    },\n  ],\n  [\n    \"dodgerblue\",\n    {\n      r: 30,\n      g: 144,\n      b: 255,\n    },\n  ],\n  [\n    \"firebrick\",\n    {\n      r: 178,\n      g: 34,\n      b: 34,\n    },\n  ],\n  [\n    \"floralwhite\",\n    {\n      r: 255,\n      g: 250,\n      b: 240,\n    },\n  ],\n  [\n    \"forestgreen\",\n    {\n      r: 34,\n      g: 139,\n      b: 34,\n    },\n  ],\n  [\n    \"fuchsia\",\n    {\n      r: 255,\n      g: 0,\n      b: 255,\n    },\n  ],\n  [\n    \"gainsboro\",\n    {\n      r: 220,\n      g: 220,\n      b: 220,\n    },\n  ],\n  [\n    \"ghostwhite\",\n    {\n      r: 248,\n      g: 248,\n      b: 255,\n    },\n  ],\n  [\n    \"goldenrod\",\n    {\n      r: 218,\n      g: 165,\n      b: 32,\n    },\n  ],\n  [\n    \"gold\",\n    {\n      r: 255,\n      g: 215,\n      b: 0,\n    },\n  ],\n  [\n    \"gray\",\n    {\n      r: 128,\n      g: 128,\n      b: 128,\n    },\n  ],\n  [\n    \"green\",\n    {\n      r: 0,\n      g: 128,\n      b: 0,\n    },\n  ],\n  [\n    \"greenyellow\",\n    {\n      r: 173,\n      g: 255,\n      b: 47,\n    },\n  ],\n  [\n    \"grey\",\n    {\n      r: 128,\n      g: 128,\n      b: 128,\n    },\n  ],\n  [\n    \"honeydew\",\n    {\n      r: 240,\n      g: 255,\n      b: 240,\n    },\n  ],\n  [\n    \"hotpink\",\n    {\n      r: 255,\n      g: 105,\n      b: 180,\n    },\n  ],\n  [\n    \"indianred\",\n    {\n      r: 205,\n      g: 92,\n      b: 92,\n    },\n  ],\n  [\n    \"indigo\",\n    {\n      r: 75,\n      g: 0,\n      b: 130,\n    },\n  ],\n  [\n    \"ivory\",\n    {\n      r: 255,\n      g: 255,\n      b: 240,\n    },\n  ],\n  [\n    \"khaki\",\n    {\n      r: 240,\n      g: 230,\n      b: 140,\n    },\n  ],\n  [\n    \"lavenderblush\",\n    {\n      r: 255,\n      g: 240,\n      b: 245,\n    },\n  ],\n  [\n    \"lavender\",\n    {\n      r: 230,\n      g: 230,\n      b: 250,\n    },\n  ],\n  [\n    \"lawngreen\",\n    {\n      r: 124,\n      g: 252,\n      b: 0,\n    },\n  ],\n  [\n    \"lemonchiffon\",\n    {\n      r: 255,\n      g: 250,\n      b: 205,\n    },\n  ],\n  [\n    \"lightblue\",\n    {\n      r: 173,\n      g: 216,\n      b: 230,\n    },\n  ],\n  [\n    \"lightcoral\",\n    {\n      r: 240,\n      g: 128,\n      b: 128,\n    },\n  ],\n  [\n    \"lightcyan\",\n    {\n      r: 224,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    \"lightgoldenrodyellow\",\n    {\n      r: 250,\n      g: 250,\n      b: 210,\n    },\n  ],\n  [\n    \"lightgray\",\n    {\n      r: 211,\n      g: 211,\n      b: 211,\n    },\n  ],\n  [\n    \"lightgreen\",\n    {\n      r: 144,\n      g: 238,\n      b: 144,\n    },\n  ],\n  [\n    \"lightgrey\",\n    {\n      r: 211,\n      g: 211,\n      b: 211,\n    },\n  ],\n  [\n    \"lightpink\",\n    {\n      r: 255,\n      g: 182,\n      b: 193,\n    },\n  ],\n  [\n    \"lightsalmon\",\n    {\n      r: 255,\n      g: 160,\n      b: 122,\n    },\n  ],\n  [\n    \"lightseagreen\",\n    {\n      r: 32,\n      g: 178,\n      b: 170,\n    },\n  ],\n  [\n    \"lightskyblue\",\n    {\n      r: 135,\n      g: 206,\n      b: 250,\n    },\n  ],\n  [\n    \"lightslategray\",\n    {\n      r: 119,\n      g: 136,\n      b: 153,\n    },\n  ],\n  [\n    \"lightslategrey\",\n    {\n      r: 119,\n      g: 136,\n      b: 153,\n    },\n  ],\n  [\n    \"lightsteelblue\",\n    {\n      r: 176,\n      g: 196,\n      b: 222,\n    },\n  ],\n  [\n    \"lightyellow\",\n    {\n      r: 255,\n      g: 255,\n      b: 224,\n    },\n  ],\n  [\n    \"lime\",\n    {\n      r: 0,\n      g: 255,\n      b: 0,\n    },\n  ],\n  [\n    \"limegreen\",\n    {\n      r: 50,\n      g: 205,\n      b: 50,\n    },\n  ],\n  [\n    \"linen\",\n    {\n      r: 250,\n      g: 240,\n      b: 230,\n    },\n  ],\n  [\n    \"magenta\",\n    {\n      r: 255,\n      g: 0,\n      b: 255,\n    },\n  ],\n  [\n    \"maroon\",\n    {\n      r: 128,\n      g: 0,\n      b: 0,\n    },\n  ],\n  [\n    \"mediumaquamarine\",\n    {\n      r: 102,\n      g: 205,\n      b: 170,\n    },\n  ],\n  [\n    \"mediumblue\",\n    {\n      r: 0,\n      g: 0,\n      b: 205,\n    },\n  ],\n  [\n    \"mediumorchid\",\n    {\n      r: 186,\n      g: 85,\n      b: 211,\n    },\n  ],\n  [\n    \"mediumpurple\",\n    {\n      r: 147,\n      g: 112,\n      b: 219,\n    },\n  ],\n  [\n    \"mediumseagreen\",\n    {\n      r: 60,\n      g: 179,\n      b: 113,\n    },\n  ],\n  [\n    \"mediumslateblue\",\n    {\n      r: 123,\n      g: 104,\n      b: 238,\n    },\n  ],\n  [\n    \"mediumspringgreen\",\n    {\n      r: 0,\n      g: 250,\n      b: 154,\n    },\n  ],\n  [\n    \"mediumturquoise\",\n    {\n      r: 72,\n      g: 209,\n      b: 204,\n    },\n  ],\n  [\n    \"mediumvioletred\",\n    {\n      r: 199,\n      g: 21,\n      b: 133,\n    },\n  ],\n  [\n    \"midnightblue\",\n    {\n      r: 25,\n      g: 25,\n      b: 112,\n    },\n  ],\n  [\n    \"mintcream\",\n    {\n      r: 245,\n      g: 255,\n      b: 250,\n    },\n  ],\n  [\n    \"mistyrose\",\n    {\n      r: 255,\n      g: 228,\n      b: 225,\n    },\n  ],\n  [\n    \"moccasin\",\n    {\n      r: 255,\n      g: 228,\n      b: 181,\n    },\n  ],\n  [\n    \"navajowhite\",\n    {\n      r: 255,\n      g: 222,\n      b: 173,\n    },\n  ],\n  [\n    \"navy\",\n    {\n      r: 0,\n      g: 0,\n      b: 128,\n    },\n  ],\n  [\n    \"oldlace\",\n    {\n      r: 253,\n      g: 245,\n      b: 230,\n    },\n  ],\n  [\n    \"olive\",\n    {\n      r: 128,\n      g: 128,\n      b: 0,\n    },\n  ],\n  [\n    \"olivedrab\",\n    {\n      r: 107,\n      g: 142,\n      b: 35,\n    },\n  ],\n  [\n    \"orange\",\n    {\n      r: 255,\n      g: 165,\n      b: 0,\n    },\n  ],\n  [\n    \"orangered\",\n    {\n      r: 255,\n      g: 69,\n      b: 0,\n    },\n  ],\n  [\n    \"orchid\",\n    {\n      r: 218,\n      g: 112,\n      b: 214,\n    },\n  ],\n  [\n    \"palegoldenrod\",\n    {\n      r: 238,\n      g: 232,\n      b: 170,\n    },\n  ],\n  [\n    \"palegreen\",\n    {\n      r: 152,\n      g: 251,\n      b: 152,\n    },\n  ],\n  [\n    \"paleturquoise\",\n    {\n      r: 175,\n      g: 238,\n      b: 238,\n    },\n  ],\n  [\n    \"palevioletred\",\n    {\n      r: 219,\n      g: 112,\n      b: 147,\n    },\n  ],\n  [\n    \"papayawhip\",\n    {\n      r: 255,\n      g: 239,\n      b: 213,\n    },\n  ],\n  [\n    \"peachpuff\",\n    {\n      r: 255,\n      g: 218,\n      b: 185,\n    },\n  ],\n  [\n    \"peru\",\n    {\n      r: 205,\n      g: 133,\n      b: 63,\n    },\n  ],\n  [\n    \"pink\",\n    {\n      r: 255,\n      g: 192,\n      b: 203,\n    },\n  ],\n  [\n    \"plum\",\n    {\n      r: 221,\n      g: 160,\n      b: 221,\n    },\n  ],\n  [\n    \"powderblue\",\n    {\n      r: 176,\n      g: 224,\n      b: 230,\n    },\n  ],\n  [\n    \"purple\",\n    {\n      r: 128,\n      g: 0,\n      b: 128,\n    },\n  ],\n  [\n    \"rebeccapurple\",\n    {\n      r: 102,\n      g: 51,\n      b: 153,\n    },\n  ],\n  [\n    \"red\",\n    {\n      r: 255,\n      g: 0,\n      b: 0,\n    },\n  ],\n  [\n    \"rosybrown\",\n    {\n      r: 188,\n      g: 143,\n      b: 143,\n    },\n  ],\n  [\n    \"royalblue\",\n    {\n      r: 65,\n      g: 105,\n      b: 225,\n    },\n  ],\n  [\n    \"saddlebrown\",\n    {\n      r: 139,\n      g: 69,\n      b: 19,\n    },\n  ],\n  [\n    \"salmon\",\n    {\n      r: 250,\n      g: 128,\n      b: 114,\n    },\n  ],\n  [\n    \"sandybrown\",\n    {\n      r: 244,\n      g: 164,\n      b: 96,\n    },\n  ],\n  [\n    \"seagreen\",\n    {\n      r: 46,\n      g: 139,\n      b: 87,\n    },\n  ],\n  [\n    \"seashell\",\n    {\n      r: 255,\n      g: 245,\n      b: 238,\n    },\n  ],\n  [\n    \"sienna\",\n    {\n      r: 160,\n      g: 82,\n      b: 45,\n    },\n  ],\n  [\n    \"silver\",\n    {\n      r: 192,\n      g: 192,\n      b: 192,\n    },\n  ],\n  [\n    \"skyblue\",\n    {\n      r: 135,\n      g: 206,\n      b: 235,\n    },\n  ],\n  [\n    \"slateblue\",\n    {\n      r: 106,\n      g: 90,\n      b: 205,\n    },\n  ],\n  [\n    \"slategray\",\n    {\n      r: 112,\n      g: 128,\n      b: 144,\n    },\n  ],\n  [\n    \"slategrey\",\n    {\n      r: 112,\n      g: 128,\n      b: 144,\n    },\n  ],\n  [\n    \"snow\",\n    {\n      r: 255,\n      g: 250,\n      b: 250,\n    },\n  ],\n  [\n    \"springgreen\",\n    {\n      r: 0,\n      g: 255,\n      b: 127,\n    },\n  ],\n  [\n    \"steelblue\",\n    {\n      r: 70,\n      g: 130,\n      b: 180,\n    },\n  ],\n  [\n    \"tan\",\n    {\n      r: 210,\n      g: 180,\n      b: 140,\n    },\n  ],\n  [\n    \"teal\",\n    {\n      r: 0,\n      g: 128,\n      b: 128,\n    },\n  ],\n  [\n    \"thistle\",\n    {\n      r: 216,\n      g: 191,\n      b: 216,\n    },\n  ],\n  [\n    \"tomato\",\n    {\n      r: 255,\n      g: 99,\n      b: 71,\n    },\n  ],\n  [\n    \"turquoise\",\n    {\n      r: 64,\n      g: 224,\n      b: 208,\n    },\n  ],\n  [\n    \"violet\",\n    {\n      r: 238,\n      g: 130,\n      b: 238,\n    },\n  ],\n  [\n    \"wheat\",\n    {\n      r: 245,\n      g: 222,\n      b: 179,\n    },\n  ],\n  [\n    \"white\",\n    {\n      r: 255,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    \"whitesmoke\",\n    {\n      r: 245,\n      g: 245,\n      b: 245,\n    },\n  ],\n  [\n    \"yellow\",\n    {\n      r: 255,\n      g: 255,\n      b: 0,\n    },\n  ],\n  [\n    \"yellowgreen\",\n    {\n      r: 154,\n      g: 205,\n      b: 50,\n    },\n  ],\n];\n\nexport default webColors;\n","// Hue angles\nconst ANGLES = \"deg|rad|grad|turn\";\n\n// <http://www.w3.org/TR/css3-values/#integers>\nconst CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n// Include CSS3 Module\n// <http://www.w3.org/TR/css3-values/#number-value>\nconst CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n// Include CSS4 Module Hue degrees unit\n// <https://www.w3.org/TR/css3-values/#angle-value>\nconst CSS_ANGLE = `[-\\\\+]?\\\\d*\\\\.?\\\\d+(?:${ANGLES})?`;\n\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nconst CSS_UNIT = `(?:${CSS_NUMBER})|(?:${CSS_INTEGER})`;\n\n// Add angles to the mix\nconst CSS_UNIT2 = `(?:${CSS_UNIT})|(?:${CSS_ANGLE}?)`;\n\n// Start & end\nconst START_MATCH = \"(?:[\\\\s|\\\\(\\\\s|\\\\s\\\\(\\\\s]+)?\";\nconst END_MATCH = \"(?:[\\\\s|\\\\)\\\\s]+)?\";\n// Components separation\nconst SEP = \"(?:[,|\\\\s]+)\";\nconst SEP2 = \"(?:[,|\\\\/\\\\s]*)?\";\n\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nconst PERMISSIVE_MATCH = `${START_MATCH}(${CSS_UNIT2})${SEP}(${CSS_UNIT})${SEP}(${CSS_UNIT})${SEP2}(${CSS_UNIT})?${END_MATCH}`;\n\nconst matchers = {\n  CSS_UNIT: new RegExp(CSS_UNIT2),\n  ANGLES,\n  CSS_ANGLE,\n  CSS_INTEGER,\n  CSS_NUMBER,\n  CSS_UNIT2,\n  PERMISSIVE_MATCH,\n  hwb: new RegExp(`hwb${PERMISSIVE_MATCH}`),\n  rgb: new RegExp(`rgb(?:a)?${PERMISSIVE_MATCH}`),\n  hsl: new RegExp(`hsl(?:a)?${PERMISSIVE_MATCH}`),\n  hsv: new RegExp(`hsv(?:a)?${PERMISSIVE_MATCH}`),\n  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n\nexport default matchers;\n","import nonColors from \"./nonColors\";\n\n/**\n * Check if a text is a valid CSS non-color value.\n */\nconst isNonColor = <T extends string>(str: T): boolean => {\n  return (nonColors as T[]).includes(str);\n};\n\nexport default isNonColor;\n\nconsole.log(isNonColor(\"red\"));\n","import HSLALike from \"../interface/hslaLike\";\nimport HSVALike from \"../interface/hsvaLike\";\nimport HWBALike from \"../interface/hwbaLike\";\nimport RGBALike from \"../interface/rgbaLike\";\n\n/**\n * Check if a value is an instance of an RGB(a)/HSL(a)/HSV(a)/HWB(a) instance.\n */\nconst isColorType = <T extends object>(\n  obj: Partial<RGBALike | HSLALike | HSVALike | HWBALike>,\n  inst: T\n): obj is T => {\n  return typeof obj === \"object\" && Object.keys(inst).every((c) => c in obj);\n};\n\nexport default isColorType;\n","/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n */\nexport default function isOnePointZero(n: string | number): boolean {\n  return `${n}`.includes(\".\") && parseFloat(n as string) === 1;\n}\n","/**\n * Check to see if string passed in is a percentage\n */\nexport default function isPercentage(n: string | number): boolean {\n  return typeof n === \"string\" && n.includes(\"%\");\n}\n","import matchers from \"./matchers\";\n\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport default function isValidCSSUnit(comp: string | number): boolean {\n  return Boolean(matchers.CSS_UNIT.exec(`${comp}`));\n}\n","// Color supported formats\nconst COLOR_FORMAT = [\"rgb\", \"hex\", \"hsl\", \"hsv\", \"hwb\"];\n\nexport default COLOR_FORMAT;\n","import nonColors from \"./nonColors\";\nimport COLOR_FORMAT from \"./colorFormat\";\nimport webColors from \"./webColors\";\n\ntype NonColor =\n  | \"transparent\"\n  | \"currentColor\"\n  | \"inherit\"\n  | \"revert\"\n  | \"initial\";\n\n/**\n * Check to see if string passed is a web safe colour.\n * @see https://stackoverflow.com/a/16994164\n */\nconst isColorName = (color: string): color is NonColor => {\n  if (\n    nonColors.includes(color) ||\n    [\"#\", ...COLOR_FORMAT].some((f) => color.includes(f))\n  ) {\n    return false;\n  }\n\n  return webColors.some(([c]) => color === c);\n};\n\nexport default isColorName;\n","import isOnePointZero from \"./isOnePointZero\";\nimport isPercentage from \"./isPercentage\";\n/**\n * Take input from [0, n] and return it as [0, 1]\n */\nexport default function bound01(N: string | number, max: number): number {\n  let n = N;\n\n  if (\n    typeof N === \"number\" &&\n    Math.min(N, 0) === 0 && // round values to 6 decimals Math.round(N * (10 ** 6)) / 10 ** 6\n    Math.max(N, 1) === 1\n  )\n    return N;\n\n  if (isOnePointZero(N)) n = \"100%\";\n\n  const processPercent = isPercentage(n);\n  n =\n    max === 360\n      ? parseFloat(n as string)\n      : Math.min(max, Math.max(0, parseFloat(n as string)));\n\n  // Automatically convert percentage into number\n  if (processPercent) n = (n * max) / 100;\n\n  // Handle floating point rounding errors\n  if (Math.abs(n - max) < 0.000001) {\n    return 1;\n  }\n  // Convert into [0, 1] range if it isn't already\n  if (max === 360) {\n    // If n is a hue given in degrees,\n    // wrap around out-of-range values into [0, 360] range\n    // then convert into [0, 1].\n    n = (n < 0 ? (n % max) + max : n % max) / max;\n  } else {\n    // If n not a hue given in degrees\n    // Convert into [0, 1] range if it isn't already.\n    n = (n % max) / max;\n  }\n  return n;\n}\n","/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1.\n */\nexport default function boundAlpha(a: string | number): number {\n  let na = parseFloat(a as string);\n\n  if (Number.isNaN(na) || na < 0 || na > 1) {\n    na = 1;\n  }\n\n  return na;\n}\n","/**\n * Force a number between 0 and 1.\n */\nexport default function clamp01(v: number): number {\n  return Math.min(1, Math.max(0, v));\n}\n","/**\n * Force a hexadecimal value to have 2 characters.\n */\nexport default function pad2(c: string): string {\n  return c.length === 1 ? `0${c}` : String(c);\n}\n","import RGB from \"../interface/rgb\";\nimport webColors from \"./webColors\";\n\n/**\n * Returns the RGB value of a web safe colour.\n */\nexport default function getRGBFromName(name: string): RGB {\n  const [[, rgbValue]] = webColors.filter(([k]) => k === name.toLowerCase());\n\n  return rgbValue;\n}\n","/**\n * Converts a base-16 hexadecimal value into a base-10 integer.\n */\nexport default function parseIntFromHex(val: string): number {\n  return parseInt(val, 16);\n}\n","import parseIntFromHex from \"./parseIntFromHex\";\n\n/**\n * Converts a hexadecimal value to decimal.\n */\nexport default function convertHexToDecimal(h: string): number {\n  return parseIntFromHex(h) / 255;\n}\n","import roundPart from \"../util/roundPart\";\n\n/**\n * Converts a decimal value to hexadecimal.\n */\nexport default function convertDecimalToHex(d: number): string {\n  return roundPart(d * 255).toString(16);\n}\n","import HSL from \"src/interface/hsl\";\n\n/**\n * Converts an RGB colour value to HSL.\n */\nexport default function rgbToHsl(r: number, g: number, b: number): HSL {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  let s = 0;\n  const l = (max + min) / 2;\n  if (max === min) {\n    s = 0;\n    h = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    if (max === r) h = (g - b) / d + (g < b ? 6 : 0);\n    if (max === g) h = (b - r) / d + 2;\n    if (max === b) h = (r - g) / d + 4;\n\n    h /= 6;\n  }\n  return { h, s, l };\n}\n","/**\n * Returns a normalized RGB component value.\n */\nexport default function hueToRgb(p: number, q: number, t: number): number {\n  let T = t;\n  if (T < 0) T += 1;\n  if (T > 1) T -= 1;\n  if (T < 1 / 6) return p + (q - p) * (6 * T);\n  if (T < 1 / 2) return q;\n  if (T < 2 / 3) return p + (q - p) * (2 / 3 - T) * 6;\n  return p;\n}\n","import hueToRgb from \"./hueToRgb\";\nimport RGB from \"../interface/rgb\";\n\n/**\n * Converts an HSL colour value to RGB.\n */\nexport default function hslToRgb(h: number, s: number, l: number): RGB {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  if (s === 0) {\n    // achromatic\n    g = l;\n    b = l;\n    r = l;\n  } else if (l) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hueToRgb(p, q, h + 1 / 3);\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - 1 / 3);\n  }\n\n  return { r, g, b };\n}\n","import HWB from \"src/interface/hwb\";\n\n/**\n * Returns an HWB colour object from an RGB colour object.\n * @link https://www.w3.org/TR/css-color-4/#hwb-to-rgb\n * @link http://alvyray.com/Papers/CG/hwb2rgb.htm\n */\nexport default function rgbToHwb(r: number, g: number, b: number): HWB {\n  let f = 0;\n  let i = 0;\n  const whiteness = Math.min(r, g, b);\n  const max = Math.max(r, g, b);\n  const black = 1 - max;\n\n  if (max === whiteness) return { h: 0, w: whiteness, b: black };\n  if (r === whiteness) {\n    f = g - b;\n    i = 3;\n  } else {\n    f = g === whiteness ? b - r : r - g;\n    i = g === whiteness ? 5 : 1;\n  }\n\n  const h = (i - f / (max - whiteness)) / 6;\n  return {\n    h: h === 1 ? 0 : h,\n    w: whiteness,\n    b: black,\n  };\n}\n","import RGB from \"../interface/rgb\";\nimport hslToRgb from \"./hslToRgb\";\n\n/**\n * Returns an RGB colour object from an HWB colour.\n *\n * @link https://www.w3.org/TR/css-color-4/#hwb-to-rgb\n * @link http://alvyray.com/Papers/CG/hwb2rgb.htm\n */\nexport default function hwbToRgb(H: number, W: number, B: number): RGB {\n  if (W + B >= 1) {\n    const gray = W / (W + B);\n    return { r: gray, g: gray, b: gray };\n  }\n  let { r, g, b } = hslToRgb(H, 1, 0.5);\n  [r, g, b] = [r, g, b].map((v) => v * (1 - W - B) + W);\n\n  return { r, g, b };\n}\n","import HSV from \"src/interface/hsv\";\n\n/**\n * Converts an RGB colour value to HSV.\n */\nexport default function rgbToHsv(r: number, g: number, b: number): HSV {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  const v = max;\n  const d = max - min;\n  const s = max === 0 ? 0 : d / max;\n  if (max === min) {\n    h = 0; // achromatic\n  } else {\n    if (r === max) h = (g - b) / d + (g < b ? 6 : 0);\n    if (g === max) h = (b - r) / d + 2;\n    if (b === max) h = (r - g) / d + 4;\n\n    h /= 6;\n  }\n  return { h, s, v };\n}\n","import RGB from \"../interface/rgb\";\n\n/**\n * Converts an HSV colour value to RGB.\n */\nexport default function hsvToRgb(H: number, S: number, V: number): RGB {\n  const h = H * 6;\n  const s = S;\n  const v = V;\n  const i = Math.floor(h);\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  const mod = i % 6;\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n  return { r, g, b };\n}\n","import pad2 from \"../util/pad2\";\nimport roundPart from \"../util/roundPart\";\n\n/**\n * Converts an RGB colour to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */\nexport default function rgbToHex(\n  r: number,\n  g: number,\n  b: number,\n  allow3Char?: boolean\n): string {\n  const hex = [\n    pad2(roundPart(r).toString(16)),\n    pad2(roundPart(g).toString(16)),\n    pad2(roundPart(b).toString(16)),\n  ];\n\n  // Return a 3 character hex if possible\n  if (\n    allow3Char &&\n    hex[0].charAt(0) === hex[0].charAt(1) &&\n    hex[1].charAt(0) === hex[1].charAt(1) &&\n    hex[2].charAt(0) === hex[2].charAt(1)\n  ) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n  }\n\n  return hex.join(\"\");\n}\n","import pad2 from \"../util/pad2\";\nimport roundPart from \"../util/roundPart\";\nimport convertDecimalToHex from \"./convertDecimalToHex\";\n\n/**\n * Converts an RGBA color plus alpha transparency to hex8.\n */\nexport default function rgbaToHex(\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n  allow4Char?: boolean\n): string {\n  const hex = [\n    pad2(roundPart(r).toString(16)),\n    pad2(roundPart(g).toString(16)),\n    pad2(roundPart(b).toString(16)),\n    pad2(convertDecimalToHex(a)),\n  ];\n\n  // Return a 4 character hex if possible\n  if (\n    allow4Char &&\n    hex[0].charAt(0) === hex[0].charAt(1) &&\n    hex[1].charAt(0) === hex[1].charAt(1) &&\n    hex[2].charAt(0) === hex[2].charAt(1) &&\n    hex[3].charAt(0) === hex[3].charAt(1)\n  ) {\n    return (\n      hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0)\n    );\n  }\n  return hex.join(\"\");\n}\n","import RGBALike from \"src/interface/rgbaLike\";\nimport HSLALike from \"src/interface/hslaLike\";\nimport HWBALike from \"src/interface/hwbaLike\";\nimport HSVALike from \"src/interface/hsvaLike\";\n\nimport isColorName from \"./isColorName\";\nimport isNonColor from \"./isNonColor\";\nimport getRGBFromName from \"./getRGBFromName\";\nimport matchers from \"./matchers\";\nimport parseIntFromHex from \"../convert/parseIntFromHex\";\nimport convertHexToDecimal from \"../convert/convertHexToDecimal\";\n\n/**\n * Permissive string parsing. Take in a number of formats, and output an object\n * based on detected format. Returns {r,g,b} or {h,s,l} or {h,s,v}\n */\nexport default function stringInputToObject(\n  input?: string\n): RGBALike | HSLALike | HSVALike | HWBALike {\n  const color: string = String(input).trim().toLowerCase();\n\n  if (isColorName(color)) {\n    return Object.assign(getRGBFromName(color), {\n      a: 1,\n      format: \"rgb\",\n      ok: true,\n    });\n  }\n  if (isNonColor(color)) {\n    const a = color === \"transparent\" ? 0 : 1;\n    return {\n      r: 0,\n      g: 0,\n      b: 0,\n      a,\n      format: \"rgb\",\n      ok: true,\n    };\n  }\n\n  // Try to match string input using regular expressions.\n  // Keep most of the number bounding out of this function,\n  //   don't worry about [0,1] or [0,100] or [0,360]\n  // Just return an object and let the conversion functions handle that.\n  // This way the result will be the same whether Color is initialized with string or object.\n  let [, m1, m2, m3, m4] = matchers.rgb.exec(color) || [];\n  if (m1 && m2 && m3 /* && m4 */) {\n    return {\n      r: m1,\n      g: m2,\n      b: m3,\n      a: m4 !== undefined ? m4 : 1,\n      format: \"rgb\",\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hsl.exec(color) || [];\n  if (m1 && m2 && m3 /* && m4 */) {\n    return {\n      h: m1,\n      s: m2,\n      l: m3,\n      a: m4 !== undefined ? m4 : 1,\n      format: \"hsl\",\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hsv.exec(color) || [];\n  if (m1 && m2 && m3 /* && m4 */) {\n    return {\n      h: m1,\n      s: m2,\n      v: m3,\n      a: m4 !== undefined ? m4 : 1,\n      format: \"hsv\",\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hwb.exec(color) || [];\n  if (m1 && m2 && m3) {\n    return {\n      h: m1,\n      w: m2,\n      b: m3,\n      a: m4 !== undefined ? m4 : 1,\n      format: \"hwb\",\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hex8.exec(color) || [];\n  if (m1 && m2 && m3 && m4) {\n    return {\n      r: parseIntFromHex(m1),\n      g: parseIntFromHex(m2),\n      b: parseIntFromHex(m3),\n      a: convertHexToDecimal(m4),\n      format: \"hex\",\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3] = matchers.hex6.exec(color) || [];\n  if (m1 && m2 && m3) {\n    return {\n      r: parseIntFromHex(m1),\n      g: parseIntFromHex(m2),\n      b: parseIntFromHex(m3),\n      a: 1,\n      format: \"hex\",\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hex4.exec(color) || [];\n  if (m1 && m2 && m3 && m4) {\n    return {\n      r: parseIntFromHex(m1 + m1),\n      g: parseIntFromHex(m2 + m2),\n      b: parseIntFromHex(m3 + m3),\n      a: convertHexToDecimal(m4 + m4),\n      format: \"hex\",\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3] = matchers.hex3.exec(color) || [];\n  if (m1 && m2 && m3) {\n    return {\n      r: parseIntFromHex(m1 + m1),\n      g: parseIntFromHex(m2 + m2),\n      b: parseIntFromHex(m3 + m3),\n      a: 1,\n      format: \"hex\",\n      ok: true,\n    };\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1,\n    format: \"rgb\",\n    ok: !input ? true : false,\n  };\n}\n","import ColorInputTypes from \"./colorInputTypes\";\nimport RGBAObject from \"../interface/rgbaObject\";\nimport stringInputToObject from \"./stringInputToObject\";\nimport isColorType from \"./isColorType\";\nimport isValidCSSUnit from \"./isValidCSSUnit\";\nimport isPercentage from \"./isPercentage\";\nimport bound01 from \"./bound01\";\nimport boundAlpha from \"./boundAlpha\";\nimport hsvToRgb from \"../convert/hsvToRgb\";\nimport hslToRgb from \"../convert/hslToRgb\";\nimport hwbToRgb from \"../convert/hwbToRgb\";\n\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\" // CSS4 Module\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba(255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba(1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"rgb(255 0 0 / 10%)\" or \"rgb 255 0 0 0.1\" // CSS4 Module\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsl(0deg 100% 50% / 50%)\" or \"hsl 0 100 50 50\" // CSS4 Module\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * \"hsva(0, 100%, 100%, 0.1)\" or \"hsva 0 100% 100% 0.1\"\n * \"hsv(0deg 100% 100% / 10%)\" or \"hsv 0 100 100 0.1\" // CSS4 Module\n * \"hwb(0deg, 100%, 100%, 100%)\" or \"hwb 0 100% 100% 0.1\" // CSS4 Module\n * ```\n */\nexport default function inputToRGB(input?: ColorInputTypes): RGBAObject {\n  let rgb = { r: 0, g: 0, b: 0 };\n  let color = input;\n  let a = 1;\n  let s: number;\n  let v: number;\n  let l: number;\n  let w: number;\n  let b: number;\n  let h: number;\n  let r: number;\n  let g: number;\n  let format = \"rgb\";\n  let ok = false;\n\n  if (!color || typeof color === \"string\") {\n    color = stringInputToObject(color as string);\n    ok = (color as RGBAObject).ok;\n  }\n\n  if (\n    isColorType(color, rgb) &&\n    isValidCSSUnit(color.r) &&\n    isValidCSSUnit(color.g) &&\n    isValidCSSUnit(color.b)\n  ) {\n    ({ r, g, b } = color);\n    // RGB values now are all in [0, 1] range\n    [r, g, b] = [r, g, b].map((n) => bound01(n, isPercentage(n) ? 100 : 255));\n    rgb = { r, g, b };\n    format = \"format\" in color ? (color as RGBAObject).format : \"rgb\";\n  }\n  if (\n    isColorType(color, { h: 0, s: 0, v: 0 }) &&\n    isValidCSSUnit(color.h) &&\n    isValidCSSUnit(color.s) &&\n    isValidCSSUnit(color.v)\n  ) {\n    ({ h, s, v } = color);\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\n    s = bound01(s, 100); // saturation can be `5%` or a [0, 1] value\n    v = bound01(v, 100); // brightness can be `5%` or a [0, 1] value\n    rgb = hsvToRgb(h, s, v);\n    format = \"hsv\";\n  }\n  if (\n    isColorType(color, { h: 0, s: 0, l: 0 }) &&\n    isValidCSSUnit(color.h) &&\n    isValidCSSUnit(color.s) &&\n    isValidCSSUnit(color.l)\n  ) {\n    ({ h, s, l } = color);\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\n    s = bound01(s, 100); // saturation can be `5%` or a [0, 1] value\n    l = bound01(l, 100); // lightness can be `5%` or a [0, 1] value\n    rgb = hslToRgb(h, s, l);\n    format = \"hsl\";\n  }\n  if (\n    isColorType(color, { h: 0, w: 0, b: 0 }) &&\n    isValidCSSUnit(color.h) &&\n    isValidCSSUnit(color.w) &&\n    isValidCSSUnit(color.b)\n  ) {\n    ({ h, w, b } = color);\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\n    w = bound01(w, 100); // whiteness can be `5%` or a [0, 1] value\n    b = bound01(b, 100); // blackness can be `5%` or a [0, 1] value\n    rgb = hwbToRgb(h, w, b);\n    format = \"hwb\";\n  }\n\n  if (isValidCSSUnit((color as RGBAObject).a)) {\n    a = (color as RGBAObject).a;\n    a = isPercentage(a) || parseFloat(`${a}`) > 1 ? bound01(a, 100) : a;\n  }\n\n  return {\n    r: rgb.r,\n    g: rgb.g,\n    b: rgb.b,\n    a: boundAlpha(a),\n    format,\n    ok,\n  };\n}\n","import nonColors from \"./util/nonColors\";\nimport roundPart from \"./util/roundPart\";\nimport webColors from \"./util/webColors\";\nimport RGBA from \"./interface/rgba\";\nimport HSLA from \"./interface/hsla\";\nimport HSVA from \"./interface/hsva\";\nimport HWBA from \"./interface/hwba\";\nimport matchers from \"./util/matchers\";\nimport isNonColor from \"./util/isNonColor\";\nimport isColorType from \"./util/isColorType\";\nimport isOnePointZero from \"./util/isOnePointZero\";\nimport isPercentage from \"./util/isPercentage\";\nimport isValidCSSUnit from \"./util/isValidCSSUnit\";\nimport isColorName from \"./util/isColorName\";\nimport bound01 from \"./util/bound01\";\nimport boundAlpha from \"./util/boundAlpha\";\nimport clamp01 from \"./util/clamp01\";\nimport pad2 from \"./util/pad2\";\nimport COLOR_FORMAT from \"./util/colorFormat\";\nimport getRGBFromName from \"./util/getRGBFromName\";\nimport convertHexToDecimal from \"./convert/convertHexToDecimal\";\nimport convertDecimalToHex from \"./convert/convertDecimalToHex\";\nimport parseIntFromHex from \"./convert/parseIntFromHex\";\nimport ColorFormats from \"./util/colorFormats\";\nimport ColorInputTypes from \"./util/colorInputTypes\";\nimport rgbToHsl from \"./convert/rgbToHsl\";\nimport hueToRgb from \"./convert/hueToRgb\";\nimport hslToRgb from \"./convert/hslToRgb\";\nimport rgbToHwb from \"./convert/rgbToHwb\";\nimport hwbToRgb from \"./convert/hwbToRgb\";\nimport rgbToHsv from \"./convert/rgbToHsv\";\nimport hsvToRgb from \"./convert/hsvToRgb\";\nimport rgbToHex from \"./convert/rgbToHex\";\nimport rgbaToHex from \"./convert/rgbaToHex\";\nimport stringInputToObject from \"./util/stringInputToObject\";\nimport inputToRGB from \"./util/inputToRgb\";\n\n/**\n * Returns a new `Color` instance.\n * @see https://github.com/bgrins/TinyColor\n */\nexport default class Color {\n  public r: number;\n  public g: number;\n  public b: number;\n  public a: number;\n  public format: string;\n  public ok: boolean;\n  public originalInput?: string | Color | ColorInputTypes;\n\n  constructor(input?: ColorInputTypes | Partial<Color>, config?: ColorFormats) {\n    const configFormat = config && COLOR_FORMAT.includes(config) ? config : \"\";\n\n    // If input is already a `Color` or compatible object, clone its values\n    const { r, g, b, a, ok, format } = inputToRGB(input);\n\n    this.originalInput = input;\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n    this.ok = ok;\n    this.format = configFormat || format;\n  }\n\n  /**\n   * Checks if the current input value is a valid colour.\n   */\n  get isValid(): boolean {\n    return this.ok;\n  }\n\n  /**\n   * Checks if the current colour requires a light text colour.\n   */\n  get isDark(): boolean {\n    return this.brightness < 120;\n  }\n\n  /**\n   * Returns the perceived luminance of a colour.\n   * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n   */\n  get luminance(): number {\n    const { r, g, b } = this;\n    let R = 0;\n    let G = 0;\n    let B = 0;\n\n    if (r <= 0.03928) {\n      R = r / 12.92;\n    } else {\n      R = ((r + 0.055) / 1.055) ** 2.4;\n    }\n    if (g <= 0.03928) {\n      G = g / 12.92;\n    } else {\n      G = ((g + 0.055) / 1.055) ** 2.4;\n    }\n    if (b <= 0.03928) {\n      B = b / 12.92;\n    } else {\n      B = ((b + 0.055) / 1.055) ** 2.4;\n    }\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  }\n\n  /**\n   * Returns the perceived brightness of the colour.\n   */\n  get brightness(): number {\n    const { r, g, b } = this.toRgb();\n    return (r * 299 + g * 587 + b * 114) / 1000;\n  }\n\n  /**\n   * Returns the web colour name closest to the current colour.\n   */\n  get name(): string {\n    const { r, g, b } = this.toRgb();\n    const [colorName] = webColors\n      .map(([name, rgb]): [string, number] => {\n        const distance =\n          // ((rgb.r - r) ** 2 + (rgb.g - g) ** 2 + (rgb.b - b) ** 2) ** 0.5; // standard\n          (((rgb.r - r) * 0.3) ** 2 +\n            ((rgb.g - g) * 0.6) ** 2 +\n            ((rgb.b - b) * 0.1) ** 2) **\n          0.5; // perceived\n        return [name, distance];\n      })\n      .find(([, distance], _, ar) => {\n        return distance === Math.min(...ar.map(([, d]) => d));\n      }) as [string, number];\n\n    return colorName;\n  }\n\n  /**\n   * Returns the colour as an RGBA object.\n   */\n  toRgb(): RGBA {\n    let { r, g, b, a } = this;\n\n    [r, g, b] = [r, g, b].map((n) => roundPart(n * 255 * 100) / 100);\n    a = roundPart(a * 100) / 100;\n    return {\n      r,\n      g,\n      b,\n      a,\n    };\n  }\n\n  /**\n   * Returns the RGBA values concatenated into a CSS3 Module string format.\n   * * rgb(255,255,255)\n   * * rgba(255,255,255,0.5)\n   */\n  toRgbString(): string {\n    const { r, g, b, a } = this.toRgb();\n    const [R, G, B] = [r, g, b].map(roundPart);\n\n    return a === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${a})`;\n  }\n\n  /**\n   * Returns the RGBA values concatenated into a CSS4 Module string format.\n   * * rgb(255 255 255)\n   * * rgb(255 255 255 / 50%)\n   */\n  toRgbCSS4String(): string {\n    const { r, g, b, a } = this.toRgb();\n    const [R, G, B] = [r, g, b].map(roundPart);\n    const A = a === 1 ? \"\" : ` / ${roundPart(a * 100)}%`;\n\n    return `rgb(${R} ${G} ${B}${A})`;\n  }\n\n  /**\n   * Returns the hexadecimal value of the colour. When the parameter is *true*\n   * it will find a 3 characters shorthand of the decimal value.\n   */\n  toHex(allow3Char?: boolean | undefined): string {\n    const { r, g, b, a } = this.toRgb();\n\n    return a === 1\n      ? rgbToHex(r, g, b, allow3Char)\n      : rgbaToHex(r, g, b, a, allow3Char);\n  }\n\n  /**\n   * Returns the CSS valid hexadecimal vaue of the colour. When the parameter is *true*\n   * it will find a 3 characters shorthand of the value.\n   */\n  toHexString(allow3Char?: boolean | undefined): string {\n    return `#${this.toHex(allow3Char)}`;\n  }\n\n  /**\n   * Returns the HEX8 value of the colour.\n   */\n  toHex8(allow4Char?: boolean | undefined): string {\n    const { r, g, b, a } = this.toRgb();\n\n    return rgbaToHex(r, g, b, a, allow4Char);\n  }\n\n  /**\n   * Returns the HEX8 value of the colour.\n   */\n  toHex8String(allow4Char?: boolean | undefined): string {\n    return `#${this.toHex8(allow4Char)}`;\n  }\n\n  /**\n   * Returns the colour as a HSVA object.\n   */\n  toHsv(): HSVA {\n    const { r, g, b, a } = this;\n    const { h, s, v } = rgbToHsv(r, g, b);\n\n    return {\n      h,\n      s,\n      v,\n      a,\n    };\n  }\n\n  /**\n   * Returns the colour as an HSLA object.\n   */\n  toHsl(): HSLA {\n    const { r, g, b, a } = this;\n    const { h, s, l } = rgbToHsl(r, g, b);\n\n    return {\n      h,\n      s,\n      l,\n      a,\n    };\n  }\n\n  /**\n   * Returns the HSLA values concatenated into a CSS3 Module format string.\n   * * `hsl(150, 100%, 50%)`\n   * * `hsla(150, 100%, 50%, 0.5)`\n   */\n  toHslString(): string {\n    let { h, s, l, a } = this.toHsl();\n    h = roundPart(h * 360);\n    s = roundPart(s * 100);\n    l = roundPart(l * 100);\n    a = roundPart(a * 100) / 100;\n\n    return a === 1\n      ? `hsl(${h}, ${s}%, ${l}%)`\n      : `hsla(${h}, ${s}%, ${l}%, ${a})`;\n  }\n\n  /**\n   * Returns the HSLA values concatenated into a CSS4 Module format string.\n   * * `hsl(150deg 100% 50%)`\n   * * `hsl(150deg 100% 50% / 50%)`\n   */\n  toHslCSS4String(): string {\n    let { h, s, l, a } = this.toHsl();\n    h = roundPart(h * 360);\n    s = roundPart(s * 100);\n    l = roundPart(l * 100);\n    a = roundPart(a * 100);\n    const A = a < 100 ? ` / ${roundPart(a)}%` : \"\";\n\n    return `hsl(${h}deg ${s}% ${l}%${A})`;\n  }\n\n  /**\n   * Returns the colour as an HWBA object.\n   */\n  toHwb(): HWBA {\n    const { r, g, b, a } = this;\n    const { h, w, b: bl } = rgbToHwb(r, g, b);\n    return {\n      h,\n      w,\n      b: bl,\n      a,\n    };\n  }\n\n  /**\n   * Returns the HWBA values concatenated into a string.\n   */\n  toHwbString(): string {\n    let { h, w, b, a } = this.toHwb();\n    h = roundPart(h * 360);\n    w = roundPart(w * 100);\n    b = roundPart(b * 100);\n    a = roundPart(a * 100);\n    const A = a < 100 ? ` / ${roundPart(a)}%` : \"\";\n\n    return `hwb(${h}deg ${w}% ${b}%${A})`;\n  }\n\n  /**\n   * Sets the alpha value of the current colour.\n   */\n  setAlpha(alpha?: number): Color {\n    if (typeof alpha !== \"number\") return this;\n    this.a = boundAlpha(alpha);\n    return this;\n  }\n\n  /**\n   * Saturate the colour with a given amount.\n   */\n  saturate(amount?: number): Color {\n    if (typeof amount !== \"number\") return this;\n    const { h, s, l } = this.toHsl();\n    const { r, g, b } = hslToRgb(h, clamp01(s + amount / 100), l);\n\n    Object.assign(this, { r, g, b });\n    return this;\n  }\n\n  /**\n   * Desaturate the colour with a given amount.\n   */\n  desaturate(amount?: number): Color {\n    return typeof amount === \"number\" ? this.saturate(-amount) : this;\n  }\n\n  /**\n   * Completely desaturates a colour into greyscale.\n   * Same as calling `desaturate(100)`\n   */\n  greyscale(): Color {\n    return this.saturate(-100);\n  }\n\n  /**\n   * Increase the colour lightness with a given amount.\n   */\n  lighten(amount?: number): Color {\n    if (typeof amount !== \"number\") return this;\n\n    const { h, s, l } = this.toHsl();\n    const { r, g, b } = hslToRgb(h, s, clamp01(l + amount / 100));\n\n    Object.assign(this, { r, g, b });\n    return this;\n  }\n\n  /**\n   * Decrease the colour lightness with a given amount.\n   */\n  darken(amount?: number): Color {\n    return typeof amount === \"number\" ? this.lighten(-amount) : this;\n  }\n\n  /**\n   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n   * Values outside of this range will be wrapped into this range.\n   */\n  spin(amount?: number): Color {\n    if (typeof amount !== \"number\") return this;\n\n    const { h, s, l } = this.toHsl();\n    const { r, g, b } = hslToRgb(\n      clamp01(((h * 360 + amount) % 360) / 360),\n      s,\n      l\n    );\n\n    Object.assign(this, { r, g, b });\n    return this;\n  }\n\n  /** Returns a clone of the current `Color` instance. */\n  clone(): Color {\n    return new Color(this);\n  }\n\n  /**\n   * Returns the colour value in CSS valid string format.\n   */\n  toString(allowShort?: boolean | undefined): string {\n    const { format } = this;\n\n    if (format === \"hex\") return this.toHexString(allowShort);\n    if (format === \"hsl\") return this.toHslString();\n    if (format === \"hwb\") return this.toHwbString();\n\n    return this.toRgbString();\n  }\n}\n\nObject.assign(Color, {\n  matchers,\n  isOnePointZero,\n  isPercentage,\n  isValidCSSUnit,\n  isNonColor,\n  isColorName,\n  isColorType,\n  pad2,\n  clamp01,\n  bound01,\n  boundAlpha,\n  getRGBFromName,\n  convertHexToDecimal,\n  convertDecimalToHex,\n  rgbToHsl,\n  rgbToHex,\n  rgbToHsv,\n  rgbToHwb,\n  rgbaToHex,\n  hslToRgb,\n  hsvToRgb,\n  hueToRgb,\n  hwbToRgb,\n  parseIntFromHex,\n  stringInputToObject,\n  inputToRGB,\n  roundPart,\n  webColors,\n  nonColors,\n});\n"],"names":["nonColors","roundPart","v","floor","webColors","ANGLES","CSS_INTEGER","CSS_NUMBER","CSS_ANGLE","CSS_UNIT","CSS_UNIT2","START_MATCH","END_MATCH","SEP","SEP2","PERMISSIVE_MATCH","matchers","isNonColor","str","isColorType","obj","inst","c","isOnePointZero","n","isPercentage","isValidCSSUnit","comp","COLOR_FORMAT","isColorName","color","f","bound01","N","max","processPercent","boundAlpha","a","na","clamp01","pad2","getRGBFromName","name","rgbValue","k","parseIntFromHex","val","convertHexToDecimal","h","convertDecimalToHex","d","rgbToHsl","r","g","b","min","l","hueToRgb","p","q","t","T","hslToRgb","s","rgbToHwb","i","whiteness","black","hwbToRgb","H","W","B","gray","rgbToHsv","hsvToRgb","S","V","mod","rgbToHex","allow3Char","hex","rgbaToHex","allow4Char","stringInputToObject","input","m1","m2","m3","m4","inputToRGB","rgb","w","format","ok","Color","config","__publicField","configFormat","R","G","colorName","distance","_","ar","A","bl","alpha","amount","allowShort"],"mappings":";;;AAGA,MAAMA,IAAY;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;ACNA,SAAwBC,EAAUC,GAAmB;AAC7C,QAAAC,IAAQ,KAAK,MAAMD,CAAC;AAC1B,SAAOA,IAAIC,IAAQ,MAAMA,IAAQ,KAAK,MAAMD,CAAC;AAC/C;ACAA,MAAME,IAA6B;AAAA,EACjC;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG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"}